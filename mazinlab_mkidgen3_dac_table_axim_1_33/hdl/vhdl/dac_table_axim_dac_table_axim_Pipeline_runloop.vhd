-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dac_table_axim_dac_table_axim_Pipeline_runloop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    iout_TREADY : IN STD_LOGIC;
    qout_TREADY : IN STD_LOGIC;
    iqout_TREADY : IN STD_LOGIC;
    replay_length : IN STD_LOGIC_VECTOR (14 downto 0);
    iout_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    iout_TVALID : OUT STD_LOGIC;
    iout_TKEEP : OUT STD_LOGIC_VECTOR (31 downto 0);
    iout_TSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    iout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    qout_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    qout_TVALID : OUT STD_LOGIC;
    qout_TKEEP : OUT STD_LOGIC_VECTOR (31 downto 0);
    qout_TSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    qout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    iqout_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    iqout_TVALID : OUT STD_LOGIC;
    iqout_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    iqout_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    iqout_TUSER : OUT STD_LOGIC_VECTOR (7 downto 0);
    iqout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    length_r : IN STD_LOGIC_VECTOR (14 downto 0);
    comb2wide_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    comb2wide_V_ce0 : OUT STD_LOGIC;
    comb2wide_V_q0 : IN STD_LOGIC_VECTOR (1023 downto 0);
    run : IN STD_LOGIC_VECTOR (0 downto 0);
    tlast : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dac_table_axim_dac_table_axim_Pipeline_runloop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv32_300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000000";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv32_20F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001111";
    constant ap_const_lv32_30F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100001111";
    constant ap_const_lv32_210 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000010000";
    constant ap_const_lv32_21F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011111";
    constant ap_const_lv32_310 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100010000";
    constant ap_const_lv32_31F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100011111";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_22F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000101111";
    constant ap_const_lv32_320 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100100000";
    constant ap_const_lv32_32F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100101111";
    constant ap_const_lv32_230 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000110000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_330 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100110000";
    constant ap_const_lv32_33F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_24F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001001111";
    constant ap_const_lv32_340 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101000000";
    constant ap_const_lv32_34F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101001111";
    constant ap_const_lv32_250 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001010000";
    constant ap_const_lv32_25F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011111";
    constant ap_const_lv32_350 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101010000";
    constant ap_const_lv32_35F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101011111";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_26F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001101111";
    constant ap_const_lv32_360 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101100000";
    constant ap_const_lv32_36F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101101111";
    constant ap_const_lv32_270 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001110000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv32_370 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101110000";
    constant ap_const_lv32_37F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101111111";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_28F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010001111";
    constant ap_const_lv32_380 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110000000";
    constant ap_const_lv32_38F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110001111";
    constant ap_const_lv32_290 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010010000";
    constant ap_const_lv32_29F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011111";
    constant ap_const_lv32_390 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110010000";
    constant ap_const_lv32_39F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110011111";
    constant ap_const_lv32_2A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010100000";
    constant ap_const_lv32_2AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010101111";
    constant ap_const_lv32_3A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110100000";
    constant ap_const_lv32_3AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110101111";
    constant ap_const_lv32_2B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010110000";
    constant ap_const_lv32_2BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111111";
    constant ap_const_lv32_3B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110110000";
    constant ap_const_lv32_3BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110111111";
    constant ap_const_lv32_2C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000000";
    constant ap_const_lv32_2CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011001111";
    constant ap_const_lv32_3C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111000000";
    constant ap_const_lv32_3CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111001111";
    constant ap_const_lv32_2D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011010000";
    constant ap_const_lv32_2DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011011111";
    constant ap_const_lv32_3D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111010000";
    constant ap_const_lv32_3DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111011111";
    constant ap_const_lv32_2E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011100000";
    constant ap_const_lv32_2EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011101111";
    constant ap_const_lv32_3E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111100000";
    constant ap_const_lv32_3EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111101111";
    constant ap_const_lv32_2F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011110000";
    constant ap_const_lv32_3F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111110000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal p_run_reg_462 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_p_run_phi_fu_465_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal iout_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal qout_TDATA_blk_n : STD_LOGIC;
    signal iqout_TDATA_blk_n : STD_LOGIC;
    signal p_run_3_reg_1472 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln46_fu_539_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln46_reg_1477 : STD_LOGIC_VECTOR (0 downto 0);
    signal itmp_last_V_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal itmp_last_V_reg_1481 : STD_LOGIC_VECTOR (0 downto 0);
    signal iqtmp_user_V_fu_592_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal iqtmp_user_V_reg_1493 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_run_1_phi_fu_507_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_phi_mux_iqtmpdat_phi_fu_476_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_10_s_fu_956_p33 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter1_iqtmpdat_reg_473 : STD_LOGIC_VECTOR (511 downto 0);
    signal iq_V_6_s_fu_1375_p33 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_qtmpdat_phi_fu_486_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_phi_reg_pp0_iter1_qtmpdat_reg_483 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_phi_mux_itmpdat_phi_fu_496_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal i_V_fu_626_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_phi_reg_pp0_iter1_itmpdat_reg_493 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_phi_reg_pp0_iter1_p_run_1_reg_503 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln573_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_352 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_allocacmp_p_Val2_load : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_allocacmp_p_Val2_load_1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sample_V_fu_608_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal last_counter_V_fu_356 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_allocacmp_last_counter_V_load : STD_LOGIC_VECTOR (14 downto 0);
    signal last_counter_V_2_fu_555_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_runcache_fu_360 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_allocacmp_p_run_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_fu_364 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln1049_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_counter_V_1_fu_549_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_fu_569_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1049_1_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln223_fu_602_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_21_14_fu_946_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_14_fu_936_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_13_fu_926_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_13_fu_916_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_12_fu_906_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_12_fu_896_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_11_fu_886_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_11_fu_876_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_10_fu_866_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_10_fu_856_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_s_fu_846_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_s_fu_836_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_9_fu_826_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_9_fu_816_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_8_fu_806_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_8_fu_796_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_7_fu_786_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_7_fu_776_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_6_fu_766_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_6_fu_756_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_5_fu_746_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_5_fu_736_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_4_fu_726_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_4_fu_716_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_3_fu_706_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_3_fu_696_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_2_fu_686_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_2_fu_676_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_1_fu_666_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_1_fu_656_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_fu_646_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln674_fu_642_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_14_fu_1365_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_14_fu_1355_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_13_fu_1345_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_13_fu_1335_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_12_fu_1325_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_12_fu_1315_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_11_fu_1305_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_11_fu_1295_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_10_fu_1285_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_10_fu_1275_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_s_fu_1265_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_s_fu_1255_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_9_fu_1245_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_9_fu_1235_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_8_fu_1225_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_8_fu_1215_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_7_fu_1205_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_7_fu_1195_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_6_fu_1185_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_6_fu_1175_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_5_fu_1165_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_5_fu_1155_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_4_fu_1145_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_4_fu_1135_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_3_fu_1125_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_3_fu_1115_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_2_fu_1105_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_2_fu_1095_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_1_fu_1085_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_1_fu_1075_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_3_fu_1065_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_2_fu_1055_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_860 : BOOLEAN;
    signal ap_condition_865 : BOOLEAN;
    signal ap_condition_869 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component dac_table_axim_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dac_table_axim_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    last_counter_V_fu_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_phi_mux_p_run_phi_fu_465_p4 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    last_counter_V_fu_356 <= last_counter_V_2_fu_555_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    last_counter_V_fu_356 <= replay_length;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_phi_mux_p_run_phi_fu_465_p4 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    p_Val2_s_fu_352 <= sample_V_fu_608_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_s_fu_352 <= ap_const_lv15_0;
                end if;
            end if; 
        end if;
    end process;

    p_run_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    p_run_reg_462 <= ap_const_lv1_1;
                elsif ((ap_const_boolean_1 = ap_condition_865)) then 
                    p_run_reg_462 <= ap_phi_mux_p_run_1_phi_fu_507_p4;
                end if;
            end if; 
        end if;
    end process;

    p_runcache_fu_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_869)) then 
                    p_runcache_fu_360 <= run;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    p_runcache_fu_360 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_p_run_phi_fu_465_p4 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                iqtmp_user_V_reg_1493 <= iqtmp_user_V_fu_592_p1;
                itmp_last_V_reg_1481 <= itmp_last_V_fu_563_p2;
                trunc_ln46_reg_1477 <= trunc_ln46_fu_539_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_run_reg_462 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln46_reg_1477 = ap_const_lv1_0))) then
                p_Val2_1_fu_364 <= comb2wide_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_run_3_reg_1472 <= ap_sig_allocacmp_p_run_3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln223_fu_602_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_p_Val2_load_1) + unsigned(ap_const_lv15_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, iout_TREADY, p_run_reg_462, qout_TREADY, iqout_TREADY)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((iqout_TREADY = ap_const_logic_0) and (p_run_reg_462 = ap_const_lv1_1)) or ((qout_TREADY = ap_const_logic_0) and (p_run_reg_462 = ap_const_lv1_1)) or ((p_run_reg_462 = ap_const_lv1_1) and (iout_TREADY = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, iout_TREADY, p_run_reg_462, qout_TREADY, iqout_TREADY, ap_block_state2_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((iqout_TREADY = ap_const_logic_0) and (p_run_reg_462 = ap_const_lv1_1)) or ((qout_TREADY = ap_const_logic_0) and (p_run_reg_462 = ap_const_lv1_1)) or ((p_run_reg_462 = ap_const_lv1_1) and (iout_TREADY = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, iout_TREADY, p_run_reg_462, qout_TREADY, iqout_TREADY, ap_block_state2_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((iqout_TREADY = ap_const_logic_0) and (p_run_reg_462 = ap_const_lv1_1)) or ((qout_TREADY = ap_const_logic_0) and (p_run_reg_462 = ap_const_lv1_1)) or ((p_run_reg_462 = ap_const_lv1_1) and (iout_TREADY = ap_const_logic_0))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(iout_TREADY, p_run_reg_462, qout_TREADY, iqout_TREADY)
    begin
                ap_block_state2_io <= (((iqout_TREADY = ap_const_logic_0) and (p_run_reg_462 = ap_const_lv1_1)) or ((qout_TREADY = ap_const_logic_0) and (p_run_reg_462 = ap_const_lv1_1)) or ((p_run_reg_462 = ap_const_lv1_1) and (iout_TREADY = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(iout_TREADY, p_run_reg_462, qout_TREADY, iqout_TREADY)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((iqout_TREADY = ap_const_logic_0) and (p_run_reg_462 = ap_const_lv1_1)) or ((qout_TREADY = ap_const_logic_0) and (p_run_reg_462 = ap_const_lv1_1)) or ((p_run_reg_462 = ap_const_lv1_1) and (iout_TREADY = ap_const_logic_0)));
    end process;


    ap_condition_860_assign_proc : process(ap_enable_reg_pp0_iter1, p_run_reg_462, ap_block_pp0_stage0)
    begin
                ap_condition_860 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (p_run_reg_462 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_865_assign_proc : process(ap_enable_reg_pp0_iter1, p_run_reg_462, ap_block_pp0_stage0_11001)
    begin
                ap_condition_865 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_run_reg_462 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_869_assign_proc : process(ap_enable_reg_pp0_iter0, ap_phi_mux_p_run_phi_fu_465_p4, trunc_ln46_fu_539_p1)
    begin
                ap_condition_869 <= ((ap_phi_mux_p_run_phi_fu_465_p4 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (trunc_ln46_fu_539_p1 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_phi_mux_p_run_phi_fu_465_p4)
    begin
        if (((ap_phi_mux_p_run_phi_fu_465_p4 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_iqtmpdat_phi_fu_476_p4_assign_proc : process(p_run_reg_462, trunc_ln46_reg_1477, p_Result_10_s_fu_956_p33, ap_phi_reg_pp0_iter1_iqtmpdat_reg_473, iq_V_6_s_fu_1375_p33)
    begin
        if ((p_run_reg_462 = ap_const_lv1_1)) then
            if ((trunc_ln46_reg_1477 = ap_const_lv1_1)) then 
                ap_phi_mux_iqtmpdat_phi_fu_476_p4 <= iq_V_6_s_fu_1375_p33;
            elsif ((trunc_ln46_reg_1477 = ap_const_lv1_0)) then 
                ap_phi_mux_iqtmpdat_phi_fu_476_p4 <= p_Result_10_s_fu_956_p33;
            else 
                ap_phi_mux_iqtmpdat_phi_fu_476_p4 <= ap_phi_reg_pp0_iter1_iqtmpdat_reg_473;
            end if;
        else 
            ap_phi_mux_iqtmpdat_phi_fu_476_p4 <= ap_phi_reg_pp0_iter1_iqtmpdat_reg_473;
        end if; 
    end process;


    ap_phi_mux_itmpdat_phi_fu_496_p4_assign_proc : process(p_run_reg_462, trunc_ln46_reg_1477, i_V_fu_626_p1, ap_phi_reg_pp0_iter1_itmpdat_reg_493, p_Val2_1_fu_364)
    begin
        if ((p_run_reg_462 = ap_const_lv1_1)) then
            if ((trunc_ln46_reg_1477 = ap_const_lv1_1)) then 
                ap_phi_mux_itmpdat_phi_fu_496_p4 <= p_Val2_1_fu_364(767 downto 512);
            elsif ((trunc_ln46_reg_1477 = ap_const_lv1_0)) then 
                ap_phi_mux_itmpdat_phi_fu_496_p4 <= i_V_fu_626_p1;
            else 
                ap_phi_mux_itmpdat_phi_fu_496_p4 <= ap_phi_reg_pp0_iter1_itmpdat_reg_493;
            end if;
        else 
            ap_phi_mux_itmpdat_phi_fu_496_p4 <= ap_phi_reg_pp0_iter1_itmpdat_reg_493;
        end if; 
    end process;


    ap_phi_mux_p_run_1_phi_fu_507_p4_assign_proc : process(p_run_reg_462, p_run_3_reg_1472, trunc_ln46_reg_1477, ap_phi_reg_pp0_iter1_p_run_1_reg_503)
    begin
        if ((p_run_reg_462 = ap_const_lv1_1)) then
            if ((trunc_ln46_reg_1477 = ap_const_lv1_1)) then 
                ap_phi_mux_p_run_1_phi_fu_507_p4 <= p_run_3_reg_1472;
            elsif ((trunc_ln46_reg_1477 = ap_const_lv1_0)) then 
                ap_phi_mux_p_run_1_phi_fu_507_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_p_run_1_phi_fu_507_p4 <= ap_phi_reg_pp0_iter1_p_run_1_reg_503;
            end if;
        else 
            ap_phi_mux_p_run_1_phi_fu_507_p4 <= ap_phi_reg_pp0_iter1_p_run_1_reg_503;
        end if; 
    end process;


    ap_phi_mux_p_run_phi_fu_465_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_phi_mux_p_run_1_phi_fu_507_p4, ap_loop_init, ap_condition_860)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_p_run_phi_fu_465_p4 <= ap_const_lv1_1;
            elsif ((ap_const_boolean_1 = ap_condition_860)) then 
                ap_phi_mux_p_run_phi_fu_465_p4 <= ap_phi_mux_p_run_1_phi_fu_507_p4;
            else 
                ap_phi_mux_p_run_phi_fu_465_p4 <= ap_const_lv1_1;
            end if;
        else 
            ap_phi_mux_p_run_phi_fu_465_p4 <= ap_const_lv1_1;
        end if; 
    end process;


    ap_phi_mux_qtmpdat_phi_fu_486_p4_assign_proc : process(p_run_reg_462, comb2wide_V_q0, trunc_ln46_reg_1477, ap_phi_reg_pp0_iter1_qtmpdat_reg_483, p_Val2_1_fu_364)
    begin
        if ((p_run_reg_462 = ap_const_lv1_1)) then
            if ((trunc_ln46_reg_1477 = ap_const_lv1_1)) then 
                ap_phi_mux_qtmpdat_phi_fu_486_p4 <= p_Val2_1_fu_364(1023 downto 768);
            elsif ((trunc_ln46_reg_1477 = ap_const_lv1_0)) then 
                ap_phi_mux_qtmpdat_phi_fu_486_p4 <= comb2wide_V_q0(511 downto 256);
            else 
                ap_phi_mux_qtmpdat_phi_fu_486_p4 <= ap_phi_reg_pp0_iter1_qtmpdat_reg_483;
            end if;
        else 
            ap_phi_mux_qtmpdat_phi_fu_486_p4 <= ap_phi_reg_pp0_iter1_qtmpdat_reg_483;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_iqtmpdat_reg_473 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_itmpdat_reg_493 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_p_run_1_reg_503 <= "X";
    ap_phi_reg_pp0_iter1_qtmpdat_reg_483 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_last_counter_V_load_assign_proc : process(ap_CS_fsm_pp0_stage0, replay_length, ap_block_pp0_stage0, ap_loop_init, last_counter_V_fu_356)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_last_counter_V_load <= replay_length;
        else 
            ap_sig_allocacmp_last_counter_V_load <= last_counter_V_fu_356;
        end if; 
    end process;


    ap_sig_allocacmp_p_Val2_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, p_Val2_s_fu_352)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_p_Val2_load <= ap_const_lv15_0;
        else 
            ap_sig_allocacmp_p_Val2_load <= p_Val2_s_fu_352;
        end if; 
    end process;


    ap_sig_allocacmp_p_Val2_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, p_Val2_s_fu_352)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_p_Val2_load_1 <= ap_const_lv15_0;
        else 
            ap_sig_allocacmp_p_Val2_load_1 <= p_Val2_s_fu_352;
        end if; 
    end process;


    ap_sig_allocacmp_p_run_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, p_runcache_fu_360)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_p_run_3 <= ap_const_lv1_1;
        else 
            ap_sig_allocacmp_p_run_3 <= p_runcache_fu_360;
        end if; 
    end process;

    comb2wide_V_address0 <= zext_ln573_fu_579_p1(14 - 1 downto 0);

    comb2wide_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb2wide_V_ce0 <= ap_const_logic_1;
        else 
            comb2wide_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_626_p1 <= comb2wide_V_q0(256 - 1 downto 0);
    icmp_ln1049_1_fu_596_p2 <= "1" when (ap_sig_allocacmp_p_Val2_load_1 = length_r) else "0";
    icmp_ln1049_fu_543_p2 <= "1" when (ap_sig_allocacmp_last_counter_V_load = ap_const_lv15_0) else "0";
    iout_TDATA <= ap_phi_mux_itmpdat_phi_fu_496_p4;

    iout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, iout_TREADY, p_run_reg_462, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (p_run_reg_462 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iout_TDATA_blk_n <= iout_TREADY;
        else 
            iout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iout_TKEEP <= ap_const_lv32_0;
    iout_TLAST <= itmp_last_V_reg_1481;
    iout_TSTRB <= ap_const_lv32_0;

    iout_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_run_reg_462, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_run_reg_462 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iout_TVALID <= ap_const_logic_1;
        else 
            iout_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iq_V_6_s_fu_1375_p33 <= (((((((((((((((((((((((((((((((p_Result_27_14_fu_1365_p4 & p_Result_25_14_fu_1355_p4) & p_Result_27_13_fu_1345_p4) & p_Result_25_13_fu_1335_p4) & p_Result_27_12_fu_1325_p4) & p_Result_25_12_fu_1315_p4) & p_Result_27_11_fu_1305_p4) & p_Result_25_11_fu_1295_p4) & p_Result_27_10_fu_1285_p4) & p_Result_25_10_fu_1275_p4) & p_Result_27_s_fu_1265_p4) & p_Result_25_s_fu_1255_p4) & p_Result_27_9_fu_1245_p4) & p_Result_25_9_fu_1235_p4) & p_Result_27_8_fu_1225_p4) & p_Result_25_8_fu_1215_p4) & p_Result_27_7_fu_1205_p4) & p_Result_25_7_fu_1195_p4) & p_Result_27_6_fu_1185_p4) & p_Result_25_6_fu_1175_p4) & p_Result_27_5_fu_1165_p4) & p_Result_25_5_fu_1155_p4) & p_Result_27_4_fu_1145_p4) & p_Result_25_4_fu_1135_p4) & p_Result_27_3_fu_1125_p4) & p_Result_25_3_fu_1115_p4) & p_Result_27_2_fu_1105_p4) & p_Result_25_2_fu_1095_p4) & p_Result_27_1_fu_1085_p4) & p_Result_25_1_fu_1075_p4) & p_Result_3_fu_1065_p4) & p_Result_2_fu_1055_p4);
    iqout_TDATA <= ap_phi_mux_iqtmpdat_phi_fu_476_p4;

    iqout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_run_reg_462, iqout_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (p_run_reg_462 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iqout_TDATA_blk_n <= iqout_TREADY;
        else 
            iqout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iqout_TKEEP <= ap_const_lv64_0;
    iqout_TLAST <= itmp_last_V_reg_1481;
    iqout_TSTRB <= ap_const_lv64_0;
    iqout_TUSER <= iqtmp_user_V_reg_1493;

    iqout_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_run_reg_462, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_run_reg_462 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iqout_TVALID <= ap_const_logic_1;
        else 
            iqout_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iqtmp_user_V_fu_592_p1 <= ap_sig_allocacmp_p_Val2_load_1(8 - 1 downto 0);
    itmp_last_V_fu_563_p2 <= (tlast and icmp_ln1049_fu_543_p2);
    last_counter_V_1_fu_549_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_last_counter_V_load) + unsigned(ap_const_lv15_7FFF));
    last_counter_V_2_fu_555_p3 <= 
        replay_length when (icmp_ln1049_fu_543_p2(0) = '1') else 
        last_counter_V_1_fu_549_p2;
    p_Result_10_s_fu_956_p33 <= (((((((((((((((((((((((((((((((p_Result_21_14_fu_946_p4 & p_Result_19_14_fu_936_p4) & p_Result_21_13_fu_926_p4) & p_Result_19_13_fu_916_p4) & p_Result_21_12_fu_906_p4) & p_Result_19_12_fu_896_p4) & p_Result_21_11_fu_886_p4) & p_Result_19_11_fu_876_p4) & p_Result_21_10_fu_866_p4) & p_Result_19_10_fu_856_p4) & p_Result_21_s_fu_846_p4) & p_Result_19_s_fu_836_p4) & p_Result_21_9_fu_826_p4) & p_Result_19_9_fu_816_p4) & p_Result_21_8_fu_806_p4) & p_Result_19_8_fu_796_p4) & p_Result_21_7_fu_786_p4) & p_Result_19_7_fu_776_p4) & p_Result_21_6_fu_766_p4) & p_Result_19_6_fu_756_p4) & p_Result_21_5_fu_746_p4) & p_Result_19_5_fu_736_p4) & p_Result_21_4_fu_726_p4) & p_Result_19_4_fu_716_p4) & p_Result_21_3_fu_706_p4) & p_Result_19_3_fu_696_p4) & p_Result_21_2_fu_686_p4) & p_Result_19_2_fu_676_p4) & p_Result_21_1_fu_666_p4) & p_Result_19_1_fu_656_p4) & p_Result_1_fu_646_p4) & trunc_ln674_fu_642_p1);
    p_Result_19_10_fu_856_p4 <= comb2wide_V_q0(191 downto 176);
    p_Result_19_11_fu_876_p4 <= comb2wide_V_q0(207 downto 192);
    p_Result_19_12_fu_896_p4 <= comb2wide_V_q0(223 downto 208);
    p_Result_19_13_fu_916_p4 <= comb2wide_V_q0(239 downto 224);
    p_Result_19_14_fu_936_p4 <= comb2wide_V_q0(255 downto 240);
    p_Result_19_1_fu_656_p4 <= comb2wide_V_q0(31 downto 16);
    p_Result_19_2_fu_676_p4 <= comb2wide_V_q0(47 downto 32);
    p_Result_19_3_fu_696_p4 <= comb2wide_V_q0(63 downto 48);
    p_Result_19_4_fu_716_p4 <= comb2wide_V_q0(79 downto 64);
    p_Result_19_5_fu_736_p4 <= comb2wide_V_q0(95 downto 80);
    p_Result_19_6_fu_756_p4 <= comb2wide_V_q0(111 downto 96);
    p_Result_19_7_fu_776_p4 <= comb2wide_V_q0(127 downto 112);
    p_Result_19_8_fu_796_p4 <= comb2wide_V_q0(143 downto 128);
    p_Result_19_9_fu_816_p4 <= comb2wide_V_q0(159 downto 144);
    p_Result_19_s_fu_836_p4 <= comb2wide_V_q0(175 downto 160);
    p_Result_1_fu_646_p4 <= comb2wide_V_q0(271 downto 256);
    p_Result_21_10_fu_866_p4 <= comb2wide_V_q0(447 downto 432);
    p_Result_21_11_fu_886_p4 <= comb2wide_V_q0(463 downto 448);
    p_Result_21_12_fu_906_p4 <= comb2wide_V_q0(479 downto 464);
    p_Result_21_13_fu_926_p4 <= comb2wide_V_q0(495 downto 480);
    p_Result_21_14_fu_946_p4 <= comb2wide_V_q0(511 downto 496);
    p_Result_21_1_fu_666_p4 <= comb2wide_V_q0(287 downto 272);
    p_Result_21_2_fu_686_p4 <= comb2wide_V_q0(303 downto 288);
    p_Result_21_3_fu_706_p4 <= comb2wide_V_q0(319 downto 304);
    p_Result_21_4_fu_726_p4 <= comb2wide_V_q0(335 downto 320);
    p_Result_21_5_fu_746_p4 <= comb2wide_V_q0(351 downto 336);
    p_Result_21_6_fu_766_p4 <= comb2wide_V_q0(367 downto 352);
    p_Result_21_7_fu_786_p4 <= comb2wide_V_q0(383 downto 368);
    p_Result_21_8_fu_806_p4 <= comb2wide_V_q0(399 downto 384);
    p_Result_21_9_fu_826_p4 <= comb2wide_V_q0(415 downto 400);
    p_Result_21_s_fu_846_p4 <= comb2wide_V_q0(431 downto 416);
    p_Result_25_10_fu_1275_p4 <= p_Val2_1_fu_364(703 downto 688);
    p_Result_25_11_fu_1295_p4 <= p_Val2_1_fu_364(719 downto 704);
    p_Result_25_12_fu_1315_p4 <= p_Val2_1_fu_364(735 downto 720);
    p_Result_25_13_fu_1335_p4 <= p_Val2_1_fu_364(751 downto 736);
    p_Result_25_14_fu_1355_p4 <= p_Val2_1_fu_364(767 downto 752);
    p_Result_25_1_fu_1075_p4 <= p_Val2_1_fu_364(543 downto 528);
    p_Result_25_2_fu_1095_p4 <= p_Val2_1_fu_364(559 downto 544);
    p_Result_25_3_fu_1115_p4 <= p_Val2_1_fu_364(575 downto 560);
    p_Result_25_4_fu_1135_p4 <= p_Val2_1_fu_364(591 downto 576);
    p_Result_25_5_fu_1155_p4 <= p_Val2_1_fu_364(607 downto 592);
    p_Result_25_6_fu_1175_p4 <= p_Val2_1_fu_364(623 downto 608);
    p_Result_25_7_fu_1195_p4 <= p_Val2_1_fu_364(639 downto 624);
    p_Result_25_8_fu_1215_p4 <= p_Val2_1_fu_364(655 downto 640);
    p_Result_25_9_fu_1235_p4 <= p_Val2_1_fu_364(671 downto 656);
    p_Result_25_s_fu_1255_p4 <= p_Val2_1_fu_364(687 downto 672);
    p_Result_27_10_fu_1285_p4 <= p_Val2_1_fu_364(959 downto 944);
    p_Result_27_11_fu_1305_p4 <= p_Val2_1_fu_364(975 downto 960);
    p_Result_27_12_fu_1325_p4 <= p_Val2_1_fu_364(991 downto 976);
    p_Result_27_13_fu_1345_p4 <= p_Val2_1_fu_364(1007 downto 992);
    p_Result_27_14_fu_1365_p4 <= p_Val2_1_fu_364(1023 downto 1008);
    p_Result_27_1_fu_1085_p4 <= p_Val2_1_fu_364(799 downto 784);
    p_Result_27_2_fu_1105_p4 <= p_Val2_1_fu_364(815 downto 800);
    p_Result_27_3_fu_1125_p4 <= p_Val2_1_fu_364(831 downto 816);
    p_Result_27_4_fu_1145_p4 <= p_Val2_1_fu_364(847 downto 832);
    p_Result_27_5_fu_1165_p4 <= p_Val2_1_fu_364(863 downto 848);
    p_Result_27_6_fu_1185_p4 <= p_Val2_1_fu_364(879 downto 864);
    p_Result_27_7_fu_1205_p4 <= p_Val2_1_fu_364(895 downto 880);
    p_Result_27_8_fu_1225_p4 <= p_Val2_1_fu_364(911 downto 896);
    p_Result_27_9_fu_1245_p4 <= p_Val2_1_fu_364(927 downto 912);
    p_Result_27_s_fu_1265_p4 <= p_Val2_1_fu_364(943 downto 928);
    p_Result_2_fu_1055_p4 <= p_Val2_1_fu_364(527 downto 512);
    p_Result_3_fu_1065_p4 <= p_Val2_1_fu_364(783 downto 768);
    qout_TDATA <= ap_phi_mux_qtmpdat_phi_fu_486_p4;

    qout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_run_reg_462, qout_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (p_run_reg_462 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            qout_TDATA_blk_n <= qout_TREADY;
        else 
            qout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    qout_TKEEP <= ap_const_lv32_0;
    qout_TLAST <= itmp_last_V_reg_1481;
    qout_TSTRB <= ap_const_lv32_0;

    qout_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_run_reg_462, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_run_reg_462 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            qout_TVALID <= ap_const_logic_1;
        else 
            qout_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    ret_fu_569_p4 <= ap_sig_allocacmp_p_Val2_load(14 downto 1);
    sample_V_fu_608_p3 <= 
        ap_const_lv15_0 when (icmp_ln1049_1_fu_596_p2(0) = '1') else 
        add_ln223_fu_602_p2;
    trunc_ln46_fu_539_p1 <= ap_sig_allocacmp_p_Val2_load(1 - 1 downto 0);
    trunc_ln674_fu_642_p1 <= comb2wide_V_q0(16 - 1 downto 0);
    zext_ln573_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_fu_569_p4),64));
end behav;
