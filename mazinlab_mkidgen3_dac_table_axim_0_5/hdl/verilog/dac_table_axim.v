// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dac_table_axim,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.590750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=465,HLS_SYN_DSP=0,HLS_SYN_FF=1257,HLS_SYN_LUT=1306,HLS_VERSION=2019_2_1}" *)

module dac_table_axim (
        ap_clk,
        ap_rst_n,
        m_axi_control_AWVALID,
        m_axi_control_AWREADY,
        m_axi_control_AWADDR,
        m_axi_control_AWID,
        m_axi_control_AWLEN,
        m_axi_control_AWSIZE,
        m_axi_control_AWBURST,
        m_axi_control_AWLOCK,
        m_axi_control_AWCACHE,
        m_axi_control_AWPROT,
        m_axi_control_AWQOS,
        m_axi_control_AWREGION,
        m_axi_control_AWUSER,
        m_axi_control_WVALID,
        m_axi_control_WREADY,
        m_axi_control_WDATA,
        m_axi_control_WSTRB,
        m_axi_control_WLAST,
        m_axi_control_WID,
        m_axi_control_WUSER,
        m_axi_control_ARVALID,
        m_axi_control_ARREADY,
        m_axi_control_ARADDR,
        m_axi_control_ARID,
        m_axi_control_ARLEN,
        m_axi_control_ARSIZE,
        m_axi_control_ARBURST,
        m_axi_control_ARLOCK,
        m_axi_control_ARCACHE,
        m_axi_control_ARPROT,
        m_axi_control_ARQOS,
        m_axi_control_ARREGION,
        m_axi_control_ARUSER,
        m_axi_control_RVALID,
        m_axi_control_RREADY,
        m_axi_control_RDATA,
        m_axi_control_RLAST,
        m_axi_control_RID,
        m_axi_control_RUSER,
        m_axi_control_RRESP,
        m_axi_control_BVALID,
        m_axi_control_BREADY,
        m_axi_control_BRESP,
        m_axi_control_BID,
        m_axi_control_BUSER,
        iout_TDATA,
        iout_TVALID,
        iout_TREADY,
        iout_TLAST,
        qout_TDATA,
        qout_TVALID,
        qout_TREADY,
        qout_TLAST,
        iqout_TDATA,
        iqout_TVALID,
        iqout_TREADY,
        iqout_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_pp0_stage0 = 12'd256;
parameter    ap_ST_fsm_state12 = 12'd512;
parameter    ap_ST_fsm_pp1_stage0 = 12'd1024;
parameter    ap_ST_fsm_state17 = 12'd2048;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_CONTROL_ID_WIDTH = 1;
parameter    C_M_AXI_CONTROL_ADDR_WIDTH = 32;
parameter    C_M_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_M_AXI_CONTROL_AWUSER_WIDTH = 1;
parameter    C_M_AXI_CONTROL_ARUSER_WIDTH = 1;
parameter    C_M_AXI_CONTROL_WUSER_WIDTH = 1;
parameter    C_M_AXI_CONTROL_RUSER_WIDTH = 1;
parameter    C_M_AXI_CONTROL_BUSER_WIDTH = 1;
parameter    C_M_AXI_CONTROL_USER_VALUE = 0;
parameter    C_M_AXI_CONTROL_PROT_VALUE = 0;
parameter    C_M_AXI_CONTROL_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_control_AWVALID;
input   m_axi_control_AWREADY;
output  [C_M_AXI_CONTROL_ADDR_WIDTH - 1:0] m_axi_control_AWADDR;
output  [C_M_AXI_CONTROL_ID_WIDTH - 1:0] m_axi_control_AWID;
output  [7:0] m_axi_control_AWLEN;
output  [2:0] m_axi_control_AWSIZE;
output  [1:0] m_axi_control_AWBURST;
output  [1:0] m_axi_control_AWLOCK;
output  [3:0] m_axi_control_AWCACHE;
output  [2:0] m_axi_control_AWPROT;
output  [3:0] m_axi_control_AWQOS;
output  [3:0] m_axi_control_AWREGION;
output  [C_M_AXI_CONTROL_AWUSER_WIDTH - 1:0] m_axi_control_AWUSER;
output   m_axi_control_WVALID;
input   m_axi_control_WREADY;
output  [C_M_AXI_CONTROL_DATA_WIDTH - 1:0] m_axi_control_WDATA;
output  [C_M_AXI_CONTROL_WSTRB_WIDTH - 1:0] m_axi_control_WSTRB;
output   m_axi_control_WLAST;
output  [C_M_AXI_CONTROL_ID_WIDTH - 1:0] m_axi_control_WID;
output  [C_M_AXI_CONTROL_WUSER_WIDTH - 1:0] m_axi_control_WUSER;
output   m_axi_control_ARVALID;
input   m_axi_control_ARREADY;
output  [C_M_AXI_CONTROL_ADDR_WIDTH - 1:0] m_axi_control_ARADDR;
output  [C_M_AXI_CONTROL_ID_WIDTH - 1:0] m_axi_control_ARID;
output  [7:0] m_axi_control_ARLEN;
output  [2:0] m_axi_control_ARSIZE;
output  [1:0] m_axi_control_ARBURST;
output  [1:0] m_axi_control_ARLOCK;
output  [3:0] m_axi_control_ARCACHE;
output  [2:0] m_axi_control_ARPROT;
output  [3:0] m_axi_control_ARQOS;
output  [3:0] m_axi_control_ARREGION;
output  [C_M_AXI_CONTROL_ARUSER_WIDTH - 1:0] m_axi_control_ARUSER;
input   m_axi_control_RVALID;
output   m_axi_control_RREADY;
input  [C_M_AXI_CONTROL_DATA_WIDTH - 1:0] m_axi_control_RDATA;
input   m_axi_control_RLAST;
input  [C_M_AXI_CONTROL_ID_WIDTH - 1:0] m_axi_control_RID;
input  [C_M_AXI_CONTROL_RUSER_WIDTH - 1:0] m_axi_control_RUSER;
input  [1:0] m_axi_control_RRESP;
input   m_axi_control_BVALID;
output   m_axi_control_BREADY;
input  [1:0] m_axi_control_BRESP;
input  [C_M_AXI_CONTROL_ID_WIDTH - 1:0] m_axi_control_BID;
input  [C_M_AXI_CONTROL_BUSER_WIDTH - 1:0] m_axi_control_BUSER;
output  [127:0] iout_TDATA;
output   iout_TVALID;
input   iout_TREADY;
output   iout_TLAST;
output  [127:0] qout_TDATA;
output   qout_TVALID;
input   qout_TREADY;
output   qout_TLAST;
output  [255:0] iqout_TDATA;
output   iqout_TVALID;
input   iqout_TREADY;
output   iqout_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] a;
wire   [14:0] length_V;
wire    tlast;
wire   [14:0] replay_length_V;
wire    run;
reg    control_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    control_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    iout_TDATA_blk_n;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] run_read_reg_797;
reg   [0:0] run_read_reg_797_pp1_iter1_reg;
reg    ap_enable_reg_pp1_iter3;
reg   [0:0] run_read_reg_797_pp1_iter2_reg;
reg    qout_TDATA_blk_n;
reg    iqout_TDATA_blk_n;
wire    control_AWREADY;
wire    control_WREADY;
reg    control_ARVALID;
wire    control_ARREADY;
wire   [31:0] control_ARADDR;
wire    control_RVALID;
reg    control_RREADY;
wire   [31:0] control_RDATA;
wire    control_RLAST;
wire   [0:0] control_RID;
wire   [0:0] control_RUSER;
wire   [1:0] control_RRESP;
wire    control_BVALID;
wire   [1:0] control_BRESP;
wire   [0:0] control_BID;
wire   [0:0] control_BUSER;
reg   [18:0] phi_ln31_reg_402;
reg   [14:0] t_V_1_reg_413;
reg   [14:0] t_V_reg_424;
reg   [14:0] replay_length_V_read_reg_730;
reg   [0:0] tlast_read_reg_735;
reg   [14:0] length_V_read_reg_740;
reg   [29:0] a1_reg_745;
wire   [14:0] last_counter_V_3_fu_453_p2;
reg   [14:0] last_counter_V_3_reg_756;
wire    ap_CS_fsm_state8;
wire   [14:0] bar_V_fu_458_p2;
reg   [14:0] bar_V_reg_762;
wire   [0:0] icmp_ln31_fu_463_p2;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [18:0] add_ln31_fu_469_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] lshr_ln_reg_776;
reg   [15:0] lshr_ln_reg_776_pp0_iter1_reg;
wire   [2:0] trunc_ln31_fu_485_p1;
reg   [2:0] trunc_ln31_reg_781;
reg   [2:0] trunc_ln31_reg_781_pp0_iter1_reg;
reg   [31:0] control_addr_read_reg_785;
wire   [0:0] run_read_read_fu_214_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state13_pp1_stage0_iter0;
wire    ap_block_state14_pp1_stage0_iter1;
wire    ap_block_state15_pp1_stage0_iter2;
reg    ap_block_state15_io;
wire    ap_block_state16_pp1_stage0_iter3;
reg    ap_block_state16_io;
reg    ap_block_pp1_stage0_11001;
wire   [14:0] last_counter_V_2_fu_512_p3;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] tmp_last_fu_519_p2;
reg   [0:0] tmp_last_reg_806;
reg   [0:0] tmp_last_reg_806_pp1_iter1_reg;
wire   [14:0] sample_V_1_fu_547_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state12;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state13;
reg    ap_enable_reg_pp1_iter1;
reg   [14:0] comb_0_address0;
reg    comb_0_ce0;
reg    comb_0_we0;
wire   [31:0] comb_0_q0;
reg   [14:0] comb_1_address0;
reg    comb_1_ce0;
reg    comb_1_we0;
wire   [31:0] comb_1_q0;
reg   [14:0] comb_2_address0;
reg    comb_2_ce0;
reg    comb_2_we0;
wire   [31:0] comb_2_q0;
reg   [14:0] comb_3_address0;
reg    comb_3_ce0;
reg    comb_3_we0;
wire   [31:0] comb_3_q0;
reg   [14:0] comb_4_address0;
reg    comb_4_ce0;
reg    comb_4_we0;
wire   [31:0] comb_4_q0;
reg   [14:0] comb_5_address0;
reg    comb_5_ce0;
reg    comb_5_we0;
wire   [31:0] comb_5_q0;
reg   [14:0] comb_6_address0;
reg    comb_6_ce0;
reg    comb_6_we0;
wire   [31:0] comb_6_q0;
reg   [14:0] comb_7_address0;
reg    comb_7_ce0;
reg    comb_7_we0;
wire   [31:0] comb_7_q0;
wire   [63:0] zext_ln31_fu_489_p1;
wire   [63:0] zext_ln544_fu_524_p1;
wire   [63:0] empty_fu_443_p1;
wire    ap_block_pp1_stage0_01001;
wire   [0:0] icmp_ln879_fu_500_p2;
wire   [14:0] last_counter_V_fu_506_p2;
wire   [0:0] icmp_ln879_1_fu_536_p2;
wire   [14:0] sample_V_fu_541_p2;
wire   [15:0] trunc_ln244_15_fu_653_p1;
wire   [15:0] trunc_ln244_13_fu_639_p1;
wire   [15:0] trunc_ln244_11_fu_625_p1;
wire   [15:0] trunc_ln244_8_fu_611_p1;
wire   [15:0] trunc_ln244_6_fu_597_p1;
wire   [15:0] trunc_ln244_4_fu_583_p1;
wire   [15:0] trunc_ln244_2_fu_569_p1;
wire   [15:0] trunc_ln244_fu_555_p1;
wire   [15:0] trunc_ln244_12_fu_678_p4;
wire   [15:0] trunc_ln244_10_fu_643_p4;
wire   [15:0] trunc_ln244_s_fu_629_p4;
wire   [15:0] trunc_ln244_9_fu_615_p4;
wire   [15:0] trunc_ln244_7_fu_601_p4;
wire   [15:0] trunc_ln244_5_fu_587_p4;
wire   [15:0] trunc_ln244_3_fu_573_p4;
wire   [15:0] trunc_ln244_1_fu_559_p4;
wire    ap_CS_fsm_state17;
wire    regslice_both_iout_V_data_V_U_apdone_blk;
wire    regslice_both_qout_V_data_V_U_apdone_blk;
wire    regslice_both_iqout_V_data_V_U_apdone_blk;
reg    ap_block_state17;
reg   [11:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [127:0] iout_TDATA_int;
reg    iout_TVALID_int;
wire    iout_TREADY_int;
wire    regslice_both_iout_V_data_V_U_vld_out;
wire    regslice_both_w1_iout_V_last_U_apdone_blk;
wire    iout_TLAST_int;
wire    regslice_both_w1_iout_V_last_U_ack_in_dummy;
wire    regslice_both_w1_iout_V_last_U_vld_out;
wire   [127:0] qout_TDATA_int;
reg    qout_TVALID_int;
wire    qout_TREADY_int;
wire    regslice_both_qout_V_data_V_U_vld_out;
wire    regslice_both_w1_qout_V_last_U_apdone_blk;
wire    qout_TLAST_int;
wire    regslice_both_w1_qout_V_last_U_ack_in_dummy;
wire    regslice_both_w1_qout_V_last_U_vld_out;
wire   [255:0] iqout_TDATA_int;
reg    iqout_TVALID_int;
wire    iqout_TREADY_int;
wire    regslice_both_iqout_V_data_V_U_vld_out;
wire    regslice_both_w1_iqout_V_last_U_apdone_blk;
wire    iqout_TLAST_int;
wire    regslice_both_w1_iqout_V_last_U_ack_in_dummy;
wire    regslice_both_w1_iqout_V_last_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

dac_table_axim_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
dac_table_axim_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .a(a),
    .length_V(length_V),
    .tlast(tlast),
    .replay_length_V(replay_length_V),
    .run(run)
);

dac_table_axim_control_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 0 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 256 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_CONTROL_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_CONTROL_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_CONTROL_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_CONTROL_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_CONTROL_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_CONTROL_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_CONTROL_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_CONTROL_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_CONTROL_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_CONTROL_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_CONTROL_CACHE_VALUE ))
dac_table_axim_control_m_axi_U(
    .AWVALID(m_axi_control_AWVALID),
    .AWREADY(m_axi_control_AWREADY),
    .AWADDR(m_axi_control_AWADDR),
    .AWID(m_axi_control_AWID),
    .AWLEN(m_axi_control_AWLEN),
    .AWSIZE(m_axi_control_AWSIZE),
    .AWBURST(m_axi_control_AWBURST),
    .AWLOCK(m_axi_control_AWLOCK),
    .AWCACHE(m_axi_control_AWCACHE),
    .AWPROT(m_axi_control_AWPROT),
    .AWQOS(m_axi_control_AWQOS),
    .AWREGION(m_axi_control_AWREGION),
    .AWUSER(m_axi_control_AWUSER),
    .WVALID(m_axi_control_WVALID),
    .WREADY(m_axi_control_WREADY),
    .WDATA(m_axi_control_WDATA),
    .WSTRB(m_axi_control_WSTRB),
    .WLAST(m_axi_control_WLAST),
    .WID(m_axi_control_WID),
    .WUSER(m_axi_control_WUSER),
    .ARVALID(m_axi_control_ARVALID),
    .ARREADY(m_axi_control_ARREADY),
    .ARADDR(m_axi_control_ARADDR),
    .ARID(m_axi_control_ARID),
    .ARLEN(m_axi_control_ARLEN),
    .ARSIZE(m_axi_control_ARSIZE),
    .ARBURST(m_axi_control_ARBURST),
    .ARLOCK(m_axi_control_ARLOCK),
    .ARCACHE(m_axi_control_ARCACHE),
    .ARPROT(m_axi_control_ARPROT),
    .ARQOS(m_axi_control_ARQOS),
    .ARREGION(m_axi_control_ARREGION),
    .ARUSER(m_axi_control_ARUSER),
    .RVALID(m_axi_control_RVALID),
    .RREADY(m_axi_control_RREADY),
    .RDATA(m_axi_control_RDATA),
    .RLAST(m_axi_control_RLAST),
    .RID(m_axi_control_RID),
    .RUSER(m_axi_control_RUSER),
    .RRESP(m_axi_control_RRESP),
    .BVALID(m_axi_control_BVALID),
    .BREADY(m_axi_control_BREADY),
    .BRESP(m_axi_control_BRESP),
    .BID(m_axi_control_BID),
    .BUSER(m_axi_control_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(control_ARVALID),
    .I_ARREADY(control_ARREADY),
    .I_ARADDR(control_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd262144),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(control_RVALID),
    .I_RREADY(control_RREADY),
    .I_RDATA(control_RDATA),
    .I_RID(control_RID),
    .I_RUSER(control_RUSER),
    .I_RRESP(control_RRESP),
    .I_RLAST(control_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(control_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(control_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(control_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(control_BRESP),
    .I_BID(control_BID),
    .I_BUSER(control_BUSER)
);

dac_table_axim_cobkb #(
    .DataWidth( 32 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
comb_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(comb_0_address0),
    .ce0(comb_0_ce0),
    .we0(comb_0_we0),
    .d0(control_addr_read_reg_785),
    .q0(comb_0_q0)
);

dac_table_axim_cobkb #(
    .DataWidth( 32 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
comb_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(comb_1_address0),
    .ce0(comb_1_ce0),
    .we0(comb_1_we0),
    .d0(control_addr_read_reg_785),
    .q0(comb_1_q0)
);

dac_table_axim_cobkb #(
    .DataWidth( 32 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
comb_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(comb_2_address0),
    .ce0(comb_2_ce0),
    .we0(comb_2_we0),
    .d0(control_addr_read_reg_785),
    .q0(comb_2_q0)
);

dac_table_axim_cobkb #(
    .DataWidth( 32 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
comb_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(comb_3_address0),
    .ce0(comb_3_ce0),
    .we0(comb_3_we0),
    .d0(control_addr_read_reg_785),
    .q0(comb_3_q0)
);

dac_table_axim_cobkb #(
    .DataWidth( 32 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
comb_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(comb_4_address0),
    .ce0(comb_4_ce0),
    .we0(comb_4_we0),
    .d0(control_addr_read_reg_785),
    .q0(comb_4_q0)
);

dac_table_axim_cobkb #(
    .DataWidth( 32 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
comb_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(comb_5_address0),
    .ce0(comb_5_ce0),
    .we0(comb_5_we0),
    .d0(control_addr_read_reg_785),
    .q0(comb_5_q0)
);

dac_table_axim_cobkb #(
    .DataWidth( 32 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
comb_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(comb_6_address0),
    .ce0(comb_6_ce0),
    .we0(comb_6_we0),
    .d0(control_addr_read_reg_785),
    .q0(comb_6_q0)
);

dac_table_axim_cobkb #(
    .DataWidth( 32 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
comb_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(comb_7_address0),
    .ce0(comb_7_ce0),
    .we0(comb_7_we0),
    .d0(control_addr_read_reg_785),
    .q0(comb_7_q0)
);

regslice_both #(
    .DataWidth( 128 ))
regslice_both_iout_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iout_TDATA_int),
    .vld_in(iout_TVALID_int),
    .ack_in(iout_TREADY_int),
    .data_out(iout_TDATA),
    .vld_out(regslice_both_iout_V_data_V_U_vld_out),
    .ack_out(iout_TREADY),
    .apdone_blk(regslice_both_iout_V_data_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_iout_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iout_TLAST_int),
    .vld_in(iout_TVALID_int),
    .ack_in(regslice_both_w1_iout_V_last_U_ack_in_dummy),
    .data_out(iout_TLAST),
    .vld_out(regslice_both_w1_iout_V_last_U_vld_out),
    .ack_out(iout_TREADY),
    .apdone_blk(regslice_both_w1_iout_V_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 128 ))
regslice_both_qout_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(qout_TDATA_int),
    .vld_in(qout_TVALID_int),
    .ack_in(qout_TREADY_int),
    .data_out(qout_TDATA),
    .vld_out(regslice_both_qout_V_data_V_U_vld_out),
    .ack_out(qout_TREADY),
    .apdone_blk(regslice_both_qout_V_data_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_qout_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(qout_TLAST_int),
    .vld_in(qout_TVALID_int),
    .ack_in(regslice_both_w1_qout_V_last_U_ack_in_dummy),
    .data_out(qout_TLAST),
    .vld_out(regslice_both_w1_qout_V_last_U_vld_out),
    .ack_out(qout_TREADY),
    .apdone_blk(regslice_both_w1_qout_V_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 256 ))
regslice_both_iqout_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iqout_TDATA_int),
    .vld_in(iqout_TVALID_int),
    .ack_in(iqout_TREADY_int),
    .data_out(iqout_TDATA),
    .vld_out(regslice_both_iqout_V_data_V_U_vld_out),
    .ack_out(iqout_TREADY),
    .apdone_blk(regslice_both_iqout_V_data_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_iqout_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iqout_TLAST_int),
    .vld_in(iqout_TVALID_int),
    .ack_in(regslice_both_w1_iqout_V_last_U_ack_in_dummy),
    .data_out(iqout_TLAST),
    .vld_out(regslice_both_w1_iqout_V_last_U_vld_out),
    .ack_out(iqout_TREADY),
    .apdone_blk(regslice_both_w1_iqout_V_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state13)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln31_fu_463_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_ln31_reg_402 <= add_ln31_fu_469_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_ln31_reg_402 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        t_V_1_reg_413 <= 15'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (run_read_read_fu_214_p2 == 1'd1))) begin
        t_V_1_reg_413 <= sample_V_1_fu_547_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        t_V_reg_424 <= last_counter_V_3_reg_756;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (run_read_read_fu_214_p2 == 1'd1))) begin
        t_V_reg_424 <= last_counter_V_2_fu_512_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a1_reg_745 <= {{a[31:2]}};
        length_V_read_reg_740 <= length_V;
        replay_length_V_read_reg_730 <= replay_length_V;
        tlast_read_reg_735 <= tlast;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        bar_V_reg_762 <= bar_V_fu_458_p2;
        last_counter_V_3_reg_756 <= last_counter_V_3_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        control_addr_read_reg_785 <= control_RDATA;
        lshr_ln_reg_776_pp0_iter1_reg <= lshr_ln_reg_776;
        trunc_ln31_reg_781_pp0_iter1_reg <= trunc_ln31_reg_781;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln31_fu_463_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln_reg_776 <= {{phi_ln31_reg_402[18:3]}};
        trunc_ln31_reg_781 <= trunc_ln31_fu_485_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        run_read_reg_797 <= run;
        run_read_reg_797_pp1_iter1_reg <= run_read_reg_797;
        tmp_last_reg_806_pp1_iter1_reg <= tmp_last_reg_806;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        run_read_reg_797_pp1_iter2_reg <= run_read_reg_797_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (run_read_read_fu_214_p2 == 1'd1))) begin
        tmp_last_reg_806 <= tmp_last_fu_519_p2;
    end
end

always @ (*) begin
    if ((icmp_ln31_fu_463_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((run_read_read_fu_214_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_iqout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_qout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_iout_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_iqout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_qout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_iout_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        comb_0_address0 = zext_ln544_fu_524_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        comb_0_address0 = zext_ln31_fu_489_p1;
    end else begin
        comb_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        comb_0_ce0 = 1'b1;
    end else begin
        comb_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln31_reg_781_pp0_iter1_reg == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        comb_0_we0 = 1'b1;
    end else begin
        comb_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        comb_1_address0 = zext_ln544_fu_524_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        comb_1_address0 = zext_ln31_fu_489_p1;
    end else begin
        comb_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        comb_1_ce0 = 1'b1;
    end else begin
        comb_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln31_reg_781_pp0_iter1_reg == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        comb_1_we0 = 1'b1;
    end else begin
        comb_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        comb_2_address0 = zext_ln544_fu_524_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        comb_2_address0 = zext_ln31_fu_489_p1;
    end else begin
        comb_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        comb_2_ce0 = 1'b1;
    end else begin
        comb_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln31_reg_781_pp0_iter1_reg == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        comb_2_we0 = 1'b1;
    end else begin
        comb_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        comb_3_address0 = zext_ln544_fu_524_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        comb_3_address0 = zext_ln31_fu_489_p1;
    end else begin
        comb_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        comb_3_ce0 = 1'b1;
    end else begin
        comb_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln31_reg_781_pp0_iter1_reg == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        comb_3_we0 = 1'b1;
    end else begin
        comb_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        comb_4_address0 = zext_ln544_fu_524_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        comb_4_address0 = zext_ln31_fu_489_p1;
    end else begin
        comb_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        comb_4_ce0 = 1'b1;
    end else begin
        comb_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln31_reg_781_pp0_iter1_reg == 3'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        comb_4_we0 = 1'b1;
    end else begin
        comb_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        comb_5_address0 = zext_ln544_fu_524_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        comb_5_address0 = zext_ln31_fu_489_p1;
    end else begin
        comb_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        comb_5_ce0 = 1'b1;
    end else begin
        comb_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln31_reg_781_pp0_iter1_reg == 3'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        comb_5_we0 = 1'b1;
    end else begin
        comb_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        comb_6_address0 = zext_ln544_fu_524_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        comb_6_address0 = zext_ln31_fu_489_p1;
    end else begin
        comb_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        comb_6_ce0 = 1'b1;
    end else begin
        comb_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln31_reg_781_pp0_iter1_reg == 3'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        comb_6_we0 = 1'b1;
    end else begin
        comb_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        comb_7_address0 = zext_ln544_fu_524_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        comb_7_address0 = zext_ln31_fu_489_p1;
    end else begin
        comb_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        comb_7_ce0 = 1'b1;
    end else begin
        comb_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln31_reg_781_pp0_iter1_reg == 3'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        comb_7_we0 = 1'b1;
    end else begin
        comb_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((control_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        control_ARVALID = 1'b1;
    end else begin
        control_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        control_RREADY = 1'b1;
    end else begin
        control_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        control_blk_n_AR = m_axi_control_ARREADY;
    end else begin
        control_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        control_blk_n_R = m_axi_control_RVALID;
    end else begin
        control_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter3 == 1'b1) & (run_read_reg_797_pp1_iter2_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (run_read_reg_797_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0)))) begin
        iout_TDATA_blk_n = iout_TREADY_int;
    end else begin
        iout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (run_read_reg_797_pp1_iter1_reg == 1'd1))) begin
        iout_TVALID_int = 1'b1;
    end else begin
        iout_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter3 == 1'b1) & (run_read_reg_797_pp1_iter2_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (run_read_reg_797_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0)))) begin
        iqout_TDATA_blk_n = iqout_TREADY_int;
    end else begin
        iqout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (run_read_reg_797_pp1_iter1_reg == 1'd1))) begin
        iqout_TVALID_int = 1'b1;
    end else begin
        iqout_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter3 == 1'b1) & (run_read_reg_797_pp1_iter2_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (run_read_reg_797_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0)))) begin
        qout_TDATA_blk_n = qout_TREADY_int;
    end else begin
        qout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (run_read_reg_797_pp1_iter1_reg == 1'd1))) begin
        qout_TVALID_int = 1'b1;
    end else begin
        qout_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((control_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln31_fu_463_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln31_fu_463_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (run_read_read_fu_214_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1) & (ap_enable_reg_pp1_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (run_read_read_fu_214_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1) & (ap_enable_reg_pp1_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            if ((~((regslice_both_iqout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_qout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_iout_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_fu_469_p2 = (phi_ln31_reg_402 + 19'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((control_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((control_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp1_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp1_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = (control_RVALID == 1'b0);
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = (((iqout_TREADY_int == 1'b0) & (run_read_reg_797_pp1_iter1_reg == 1'd1)) | ((qout_TREADY_int == 1'b0) & (run_read_reg_797_pp1_iter1_reg == 1'd1)) | ((iout_TREADY_int == 1'b0) & (run_read_reg_797_pp1_iter1_reg == 1'd1)));
end

assign ap_block_state15_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = (((iqout_TREADY_int == 1'b0) & (run_read_reg_797_pp1_iter2_reg == 1'd1)) | ((qout_TREADY_int == 1'b0) & (run_read_reg_797_pp1_iter2_reg == 1'd1)) | ((iout_TREADY_int == 1'b0) & (run_read_reg_797_pp1_iter2_reg == 1'd1)));
end

assign ap_block_state16_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17 = ((regslice_both_iqout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_qout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_iout_V_data_V_U_apdone_blk == 1'b1));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bar_V_fu_458_p2 = ($signed(length_V_read_reg_740) + $signed(15'd32767));

assign control_ARADDR = empty_fu_443_p1;

assign empty_fu_443_p1 = a1_reg_745;

assign icmp_ln31_fu_463_p2 = ((phi_ln31_reg_402 == 19'd262144) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_536_p2 = ((t_V_1_reg_413 == bar_V_reg_762) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_500_p2 = ((t_V_reg_424 == 15'd0) ? 1'b1 : 1'b0);

assign iout_TDATA_int = {{{{{{{{trunc_ln244_15_fu_653_p1}, {trunc_ln244_13_fu_639_p1}}, {trunc_ln244_11_fu_625_p1}}, {trunc_ln244_8_fu_611_p1}}, {trunc_ln244_6_fu_597_p1}}, {trunc_ln244_4_fu_583_p1}}, {trunc_ln244_2_fu_569_p1}}, {trunc_ln244_fu_555_p1}};

assign iout_TLAST_int = tmp_last_reg_806_pp1_iter1_reg;

assign iout_TVALID = regslice_both_iout_V_data_V_U_vld_out;

assign iqout_TDATA_int = {{{{{{{{comb_7_q0}, {comb_6_q0}}, {comb_5_q0}}, {comb_4_q0}}, {comb_3_q0}}, {comb_2_q0}}, {comb_1_q0}}, {comb_0_q0}};

assign iqout_TLAST_int = tmp_last_reg_806_pp1_iter1_reg;

assign iqout_TVALID = regslice_both_iqout_V_data_V_U_vld_out;

assign last_counter_V_2_fu_512_p3 = ((icmp_ln879_fu_500_p2[0:0] === 1'b1) ? last_counter_V_3_reg_756 : last_counter_V_fu_506_p2);

assign last_counter_V_3_fu_453_p2 = ($signed(replay_length_V_read_reg_730) + $signed(15'd32767));

assign last_counter_V_fu_506_p2 = ($signed(15'd32767) + $signed(t_V_reg_424));

assign qout_TDATA_int = {{{{{{{{trunc_ln244_12_fu_678_p4}, {trunc_ln244_10_fu_643_p4}}, {trunc_ln244_s_fu_629_p4}}, {trunc_ln244_9_fu_615_p4}}, {trunc_ln244_7_fu_601_p4}}, {trunc_ln244_5_fu_587_p4}}, {trunc_ln244_3_fu_573_p4}}, {trunc_ln244_1_fu_559_p4}};

assign qout_TLAST_int = tmp_last_reg_806_pp1_iter1_reg;

assign qout_TVALID = regslice_both_qout_V_data_V_U_vld_out;

assign run_read_read_fu_214_p2 = run;

assign sample_V_1_fu_547_p3 = ((icmp_ln879_1_fu_536_p2[0:0] === 1'b1) ? 15'd0 : sample_V_fu_541_p2);

assign sample_V_fu_541_p2 = (15'd1 + t_V_1_reg_413);

assign tmp_last_fu_519_p2 = (tlast_read_reg_735 & icmp_ln879_fu_500_p2);

assign trunc_ln244_10_fu_643_p4 = {{comb_6_q0[31:16]}};

assign trunc_ln244_11_fu_625_p1 = comb_5_q0[15:0];

assign trunc_ln244_12_fu_678_p4 = {{comb_7_q0[31:16]}};

assign trunc_ln244_13_fu_639_p1 = comb_6_q0[15:0];

assign trunc_ln244_15_fu_653_p1 = comb_7_q0[15:0];

assign trunc_ln244_1_fu_559_p4 = {{comb_0_q0[31:16]}};

assign trunc_ln244_2_fu_569_p1 = comb_1_q0[15:0];

assign trunc_ln244_3_fu_573_p4 = {{comb_1_q0[31:16]}};

assign trunc_ln244_4_fu_583_p1 = comb_2_q0[15:0];

assign trunc_ln244_5_fu_587_p4 = {{comb_2_q0[31:16]}};

assign trunc_ln244_6_fu_597_p1 = comb_3_q0[15:0];

assign trunc_ln244_7_fu_601_p4 = {{comb_3_q0[31:16]}};

assign trunc_ln244_8_fu_611_p1 = comb_4_q0[15:0];

assign trunc_ln244_9_fu_615_p4 = {{comb_4_q0[31:16]}};

assign trunc_ln244_fu_555_p1 = comb_0_q0[15:0];

assign trunc_ln244_s_fu_629_p4 = {{comb_5_q0[31:16]}};

assign trunc_ln31_fu_485_p1 = phi_ln31_reg_402[2:0];

assign zext_ln31_fu_489_p1 = lshr_ln_reg_776_pp0_iter1_reg;

assign zext_ln544_fu_524_p1 = t_V_1_reg_413;

endmodule //dac_table_axim
