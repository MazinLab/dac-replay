-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dac_table is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 21;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    iout_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    iout_TVALID : OUT STD_LOGIC;
    iout_TREADY : IN STD_LOGIC;
    iout_TLAST : OUT STD_LOGIC;
    qout_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    qout_TVALID : OUT STD_LOGIC;
    qout_TREADY : IN STD_LOGIC;
    qout_TLAST : OUT STD_LOGIC;
    iqout_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    iqout_TVALID : OUT STD_LOGIC;
    iqout_TREADY : IN STD_LOGIC;
    iqout_TLAST : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of dac_table is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dac_table,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.442687,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=512,HLS_SYN_DSP=0,HLS_SYN_FF=1954,HLS_SYN_LUT=1846,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_40000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv19_8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal comb_0_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_0_0_ce0 : STD_LOGIC;
    signal comb_0_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_0_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_0_1_ce0 : STD_LOGIC;
    signal comb_0_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_1_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_1_0_ce0 : STD_LOGIC;
    signal comb_1_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_1_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_1_1_ce0 : STD_LOGIC;
    signal comb_1_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_2_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_2_0_ce0 : STD_LOGIC;
    signal comb_2_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_2_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_2_1_ce0 : STD_LOGIC;
    signal comb_2_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_3_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_3_0_ce0 : STD_LOGIC;
    signal comb_3_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_3_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_3_1_ce0 : STD_LOGIC;
    signal comb_3_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_4_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_4_0_ce0 : STD_LOGIC;
    signal comb_4_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_4_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_4_1_ce0 : STD_LOGIC;
    signal comb_4_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_5_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_5_0_ce0 : STD_LOGIC;
    signal comb_5_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_5_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_5_1_ce0 : STD_LOGIC;
    signal comb_5_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_6_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_6_0_ce0 : STD_LOGIC;
    signal comb_6_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_6_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_6_1_ce0 : STD_LOGIC;
    signal comb_6_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_7_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_7_0_ce0 : STD_LOGIC;
    signal comb_7_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_7_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_7_1_ce0 : STD_LOGIC;
    signal comb_7_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal tlast : STD_LOGIC;
    signal tlast_length : STD_LOGIC_VECTOR (31 downto 0);
    signal iout_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal qout_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal iqout_TDATA_blk_n : STD_LOGIC;
    signal tlast_length_read_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal tlast_read_reg_836 : STD_LOGIC_VECTOR (0 downto 0);
    signal length_read_reg_841 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln43_fu_602_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln43_reg_846 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln43_fu_611_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln43_reg_851 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln45_fu_623_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln45_reg_857 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln56_fu_630_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln56_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln46_fu_635_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln46_reg_947 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal regslice_both_qout_data_U_apdone_blk : STD_LOGIC;
    signal regslice_both_iqout_data_U_apdone_blk : STD_LOGIC;
    signal ap_block_state4 : BOOLEAN;
    signal trunc_ln49_fu_644_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln49_reg_955 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln46_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_658_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_963 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal lshr_ln_reg_968 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln48_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln49_1_fu_684_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln49_1_reg_973 : STD_LOGIC_VECTOR (14 downto 0);
    signal and_ln56_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ndx_fu_698_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ndx_reg_985 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_3_fu_726_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_1070 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_4_fu_748_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_1075 : STD_LOGIC_VECTOR (15 downto 0);
    signal ival_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ival_load_reg_1080 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ival_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ival_load_1_reg_1086 : STD_LOGIC_VECTOR (15 downto 0);
    signal qval_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal qval_load_reg_1092 : STD_LOGIC_VECTOR (15 downto 0);
    signal qval_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal qval_load_1_reg_1098 : STD_LOGIC_VECTOR (15 downto 0);
    signal ival_load_2_reg_1104 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ival_load_3_reg_1110 : STD_LOGIC_VECTOR (15 downto 0);
    signal qval_load_2_reg_1116 : STD_LOGIC_VECTOR (15 downto 0);
    signal qval_load_3_reg_1122 : STD_LOGIC_VECTOR (15 downto 0);
    signal ival_load_4_reg_1128 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ival_load_5_reg_1134 : STD_LOGIC_VECTOR (15 downto 0);
    signal qval_load_4_reg_1140 : STD_LOGIC_VECTOR (15 downto 0);
    signal qval_load_5_reg_1146 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state12_io : BOOLEAN;
    signal ival_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal ival_ce0 : STD_LOGIC;
    signal ival_we0 : STD_LOGIC;
    signal ival_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ival_ce1 : STD_LOGIC;
    signal qval_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal qval_ce0 : STD_LOGIC;
    signal qval_we0 : STD_LOGIC;
    signal qval_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal qval_ce1 : STD_LOGIC;
    signal ndx_0_reg_578 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_state13_io : BOOLEAN;
    signal i_0_reg_590 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln49_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_1_fu_770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln43_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln48_fu_648_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln49_fu_668_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln49_2_fu_664_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln56_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln49_3_fu_723_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal qout_TDATA_int : STD_LOGIC_VECTOR (127 downto 0);
    signal qout_TVALID_int : STD_LOGIC;
    signal qout_TREADY_int : STD_LOGIC;
    signal regslice_both_qout_data_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_qout_last_U_apdone_blk : STD_LOGIC;
    signal qout_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_qout_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_qout_last_U_vld_out : STD_LOGIC;
    signal iqout_TDATA_int : STD_LOGIC_VECTOR (255 downto 0);
    signal iqout_TVALID_int : STD_LOGIC;
    signal iqout_TREADY_int : STD_LOGIC;
    signal regslice_both_iqout_data_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_iqout_last_U_apdone_blk : STD_LOGIC;
    signal iqout_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_iqout_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_iqout_last_U_vld_out : STD_LOGIC;

    component dac_table_mux_832bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dac_table_ival IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dac_table_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        comb_0_0_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_0_0_ce0 : IN STD_LOGIC;
        comb_0_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_0_1_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_0_1_ce0 : IN STD_LOGIC;
        comb_0_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_1_0_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_1_0_ce0 : IN STD_LOGIC;
        comb_1_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_1_1_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_1_1_ce0 : IN STD_LOGIC;
        comb_1_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_2_0_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_2_0_ce0 : IN STD_LOGIC;
        comb_2_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_2_1_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_2_1_ce0 : IN STD_LOGIC;
        comb_2_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_3_0_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_3_0_ce0 : IN STD_LOGIC;
        comb_3_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_3_1_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_3_1_ce0 : IN STD_LOGIC;
        comb_3_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_4_0_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_4_0_ce0 : IN STD_LOGIC;
        comb_4_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_4_1_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_4_1_ce0 : IN STD_LOGIC;
        comb_4_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_5_0_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_5_0_ce0 : IN STD_LOGIC;
        comb_5_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_5_1_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_5_1_ce0 : IN STD_LOGIC;
        comb_5_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_6_0_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_6_0_ce0 : IN STD_LOGIC;
        comb_6_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_6_1_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_6_1_ce0 : IN STD_LOGIC;
        comb_6_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_7_0_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_7_0_ce0 : IN STD_LOGIC;
        comb_7_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_7_1_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_7_1_ce0 : IN STD_LOGIC;
        comb_7_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        tlast : OUT STD_LOGIC;
        tlast_length : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    dac_table_control_s_axi_U : component dac_table_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        comb_0_0_address0 => comb_0_0_address0,
        comb_0_0_ce0 => comb_0_0_ce0,
        comb_0_0_q0 => comb_0_0_q0,
        comb_0_1_address0 => comb_0_1_address0,
        comb_0_1_ce0 => comb_0_1_ce0,
        comb_0_1_q0 => comb_0_1_q0,
        comb_1_0_address0 => comb_1_0_address0,
        comb_1_0_ce0 => comb_1_0_ce0,
        comb_1_0_q0 => comb_1_0_q0,
        comb_1_1_address0 => comb_1_1_address0,
        comb_1_1_ce0 => comb_1_1_ce0,
        comb_1_1_q0 => comb_1_1_q0,
        comb_2_0_address0 => comb_2_0_address0,
        comb_2_0_ce0 => comb_2_0_ce0,
        comb_2_0_q0 => comb_2_0_q0,
        comb_2_1_address0 => comb_2_1_address0,
        comb_2_1_ce0 => comb_2_1_ce0,
        comb_2_1_q0 => comb_2_1_q0,
        comb_3_0_address0 => comb_3_0_address0,
        comb_3_0_ce0 => comb_3_0_ce0,
        comb_3_0_q0 => comb_3_0_q0,
        comb_3_1_address0 => comb_3_1_address0,
        comb_3_1_ce0 => comb_3_1_ce0,
        comb_3_1_q0 => comb_3_1_q0,
        comb_4_0_address0 => comb_4_0_address0,
        comb_4_0_ce0 => comb_4_0_ce0,
        comb_4_0_q0 => comb_4_0_q0,
        comb_4_1_address0 => comb_4_1_address0,
        comb_4_1_ce0 => comb_4_1_ce0,
        comb_4_1_q0 => comb_4_1_q0,
        comb_5_0_address0 => comb_5_0_address0,
        comb_5_0_ce0 => comb_5_0_ce0,
        comb_5_0_q0 => comb_5_0_q0,
        comb_5_1_address0 => comb_5_1_address0,
        comb_5_1_ce0 => comb_5_1_ce0,
        comb_5_1_q0 => comb_5_1_q0,
        comb_6_0_address0 => comb_6_0_address0,
        comb_6_0_ce0 => comb_6_0_ce0,
        comb_6_0_q0 => comb_6_0_q0,
        comb_6_1_address0 => comb_6_1_address0,
        comb_6_1_ce0 => comb_6_1_ce0,
        comb_6_1_q0 => comb_6_1_q0,
        comb_7_0_address0 => comb_7_0_address0,
        comb_7_0_ce0 => comb_7_0_ce0,
        comb_7_0_q0 => comb_7_0_q0,
        comb_7_1_address0 => comb_7_1_address0,
        comb_7_1_ce0 => comb_7_1_ce0,
        comb_7_1_q0 => comb_7_1_q0,
        length_r => length_r,
        tlast => tlast,
        tlast_length => tlast_length);

    ival_U : component dac_table_ival
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ival_address0,
        ce0 => ival_ce0,
        we0 => ival_we0,
        d0 => tmp_3_reg_1070,
        q0 => ival_q0,
        address1 => ival_address1,
        ce1 => ival_ce1,
        q1 => ival_q1);

    qval_U : component dac_table_ival
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => qval_address0,
        ce0 => qval_ce0,
        we0 => qval_we0,
        d0 => tmp_4_reg_1075,
        q0 => qval_q0,
        address1 => qval_address1,
        ce1 => qval_ce1,
        q1 => qval_q1);

    dac_table_mux_832bkb_U1 : component dac_table_mux_832bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        din0 => comb_0_0_q0,
        din1 => comb_1_0_q0,
        din2 => comb_2_0_q0,
        din3 => comb_3_0_q0,
        din4 => comb_4_0_q0,
        din5 => comb_5_0_q0,
        din6 => comb_6_0_q0,
        din7 => comb_7_0_q0,
        din8 => zext_ln49_3_fu_723_p1,
        dout => tmp_3_fu_726_p10);

    dac_table_mux_832bkb_U2 : component dac_table_mux_832bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        din0 => comb_0_1_q0,
        din1 => comb_1_1_q0,
        din2 => comb_2_1_q0,
        din3 => comb_3_1_q0,
        din4 => comb_4_1_q0,
        din5 => comb_5_1_q0,
        din6 => comb_6_1_q0,
        din7 => comb_7_1_q0,
        din8 => zext_ln49_3_fu_723_p1,
        dout => tmp_4_fu_748_p10);

    regslice_both_qout_data_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => qout_TDATA_int,
        vld_in => qout_TVALID_int,
        ack_in => qout_TREADY_int,
        data_out => qout_TDATA,
        vld_out => regslice_both_qout_data_U_vld_out,
        ack_out => qout_TREADY,
        apdone_blk => regslice_both_qout_data_U_apdone_blk);

    regslice_both_w1_qout_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => qout_TLAST_int,
        vld_in => qout_TVALID_int,
        ack_in => regslice_both_w1_qout_last_U_ack_in_dummy,
        data_out => qout_TLAST,
        vld_out => regslice_both_w1_qout_last_U_vld_out,
        ack_out => qout_TREADY,
        apdone_blk => regslice_both_w1_qout_last_U_apdone_blk);

    regslice_both_iqout_data_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iqout_TDATA_int,
        vld_in => iqout_TVALID_int,
        ack_in => iqout_TREADY_int,
        data_out => iqout_TDATA,
        vld_out => regslice_both_iqout_data_U_vld_out,
        ack_out => iqout_TREADY,
        apdone_blk => regslice_both_iqout_data_U_apdone_blk);

    regslice_both_w1_iqout_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iqout_TLAST_int,
        vld_in => iqout_TVALID_int,
        ack_in => regslice_both_w1_iqout_last_U_ack_in_dummy,
        data_out => iqout_TLAST,
        vld_out => regslice_both_w1_iqout_last_U_vld_out,
        ack_out => iqout_TREADY,
        apdone_blk => regslice_both_w1_iqout_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_both_iqout_data_U_apdone_blk = ap_const_logic_1) or (regslice_both_qout_data_U_apdone_blk = ap_const_logic_1))) and (icmp_ln46_fu_639_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_reg_590 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_reg_590 <= i_reg_963;
            end if; 
        end if;
    end process;

    ndx_0_reg_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                ndx_0_reg_578 <= ndx_reg_985;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                ndx_0_reg_578 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_652_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln49_1_reg_973 <= add_ln49_1_fu_684_p2;
                lshr_ln_reg_968 <= add_ln49_fu_668_p2(18 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln56_reg_862 <= add_ln56_fu_630_p2;
                select_ln45_reg_857 <= select_ln45_fu_623_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_652_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                and_ln56_reg_978 <= and_ln56_fu_693_p2;
                ndx_reg_985 <= ndx_fu_698_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_reg_963 <= i_fu_658_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                ival_load_1_reg_1086 <= ival_q1;
                ival_load_reg_1080 <= ival_q0;
                qval_load_1_reg_1098 <= qval_q1;
                qval_load_reg_1092 <= qval_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                ival_load_2_reg_1104 <= ival_q1;
                ival_load_3_reg_1110 <= ival_q0;
                qval_load_2_reg_1116 <= qval_q1;
                qval_load_3_reg_1122 <= qval_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                ival_load_4_reg_1128 <= ival_q1;
                ival_load_5_reg_1134 <= ival_q0;
                qval_load_4_reg_1140 <= qval_q1;
                qval_load_5_reg_1146 <= qval_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                length_read_reg_841 <= length_r;
                tlast_length_read_reg_831 <= tlast_length;
                tlast_read_reg_836 <= (0=>tlast, others=>'-');
                trunc_ln43_reg_846 <= trunc_ln43_fu_602_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                select_ln43_reg_851 <= select_ln43_fu_611_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_3_reg_1070 <= tmp_3_fu_726_p10;
                tmp_4_reg_1075 <= tmp_4_fu_748_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_both_iqout_data_U_apdone_blk = ap_const_logic_1) or (regslice_both_qout_data_U_apdone_blk = ap_const_logic_1))) and (icmp_ln46_fu_639_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                trunc_ln49_reg_955 <= trunc_ln49_fu_644_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_both_iqout_data_U_apdone_blk = ap_const_logic_1) or (regslice_both_qout_data_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln46_reg_947(18 downto 0) <= zext_ln46_fu_635_p1(18 downto 0);
            end if;
        end if;
    end process;
    zext_ln46_reg_947(31 downto 19) <= "0000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state4, regslice_both_qout_data_U_apdone_blk, regslice_both_iqout_data_U_apdone_blk, icmp_ln46_fu_639_p2, ap_CS_fsm_state5, icmp_ln48_fu_652_p2, ap_block_state12_io, ap_block_state13_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not(((regslice_both_iqout_data_U_apdone_blk = ap_const_logic_1) or (regslice_both_qout_data_U_apdone_blk = ap_const_logic_1))) and (icmp_ln46_fu_639_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((regslice_both_iqout_data_U_apdone_blk = ap_const_logic_1) or (regslice_both_qout_data_U_apdone_blk = ap_const_logic_1))) and (icmp_ln46_fu_639_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln48_fu_652_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln49_1_fu_684_p2 <= std_logic_vector(unsigned(zext_ln49_2_fu_664_p1) + unsigned(trunc_ln49_reg_955));
    add_ln49_fu_668_p2 <= std_logic_vector(unsigned(ndx_0_reg_578) + unsigned(zext_ln48_fu_648_p1));
    add_ln56_fu_630_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(tlast_length_read_reg_831));
    and_ln56_fu_693_p2 <= (tlast_read_reg_836 and icmp_ln56_fu_689_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state12_io_assign_proc : process(iout_TREADY, qout_TREADY_int, iqout_TREADY_int)
    begin
                ap_block_state12_io <= ((iqout_TREADY_int = ap_const_logic_0) or (qout_TREADY_int = ap_const_logic_0) or (iout_TREADY = ap_const_logic_0));
    end process;


    ap_block_state13_io_assign_proc : process(qout_TREADY_int, iqout_TREADY_int)
    begin
                ap_block_state13_io <= ((iqout_TREADY_int = ap_const_logic_0) or (qout_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(regslice_both_qout_data_U_apdone_blk, regslice_both_iqout_data_U_apdone_blk)
    begin
                ap_block_state4 <= ((regslice_both_iqout_data_U_apdone_blk = ap_const_logic_1) or (regslice_both_qout_data_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4, regslice_both_qout_data_U_apdone_blk, regslice_both_iqout_data_U_apdone_blk, icmp_ln46_fu_639_p2)
    begin
        if ((not(((regslice_both_iqout_data_U_apdone_blk = ap_const_logic_1) or (regslice_both_qout_data_U_apdone_blk = ap_const_logic_1))) and (icmp_ln46_fu_639_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, regslice_both_qout_data_U_apdone_blk, regslice_both_iqout_data_U_apdone_blk, icmp_ln46_fu_639_p2)
    begin
        if ((not(((regslice_both_iqout_data_U_apdone_blk = ap_const_logic_1) or (regslice_both_qout_data_U_apdone_blk = ap_const_logic_1))) and (icmp_ln46_fu_639_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    comb_0_0_address0 <= zext_ln49_fu_704_p1(15 - 1 downto 0);

    comb_0_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            comb_0_0_ce0 <= ap_const_logic_1;
        else 
            comb_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_0_1_address0 <= zext_ln49_fu_704_p1(15 - 1 downto 0);

    comb_0_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            comb_0_1_ce0 <= ap_const_logic_1;
        else 
            comb_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_1_0_address0 <= zext_ln49_fu_704_p1(15 - 1 downto 0);

    comb_1_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            comb_1_0_ce0 <= ap_const_logic_1;
        else 
            comb_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_1_1_address0 <= zext_ln49_fu_704_p1(15 - 1 downto 0);

    comb_1_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            comb_1_1_ce0 <= ap_const_logic_1;
        else 
            comb_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_2_0_address0 <= zext_ln49_fu_704_p1(15 - 1 downto 0);

    comb_2_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            comb_2_0_ce0 <= ap_const_logic_1;
        else 
            comb_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_2_1_address0 <= zext_ln49_fu_704_p1(15 - 1 downto 0);

    comb_2_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            comb_2_1_ce0 <= ap_const_logic_1;
        else 
            comb_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_3_0_address0 <= zext_ln49_fu_704_p1(15 - 1 downto 0);

    comb_3_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            comb_3_0_ce0 <= ap_const_logic_1;
        else 
            comb_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_3_1_address0 <= zext_ln49_fu_704_p1(15 - 1 downto 0);

    comb_3_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            comb_3_1_ce0 <= ap_const_logic_1;
        else 
            comb_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_4_0_address0 <= zext_ln49_fu_704_p1(15 - 1 downto 0);

    comb_4_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            comb_4_0_ce0 <= ap_const_logic_1;
        else 
            comb_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_4_1_address0 <= zext_ln49_fu_704_p1(15 - 1 downto 0);

    comb_4_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            comb_4_1_ce0 <= ap_const_logic_1;
        else 
            comb_4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_5_0_address0 <= zext_ln49_fu_704_p1(15 - 1 downto 0);

    comb_5_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            comb_5_0_ce0 <= ap_const_logic_1;
        else 
            comb_5_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_5_1_address0 <= zext_ln49_fu_704_p1(15 - 1 downto 0);

    comb_5_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            comb_5_1_ce0 <= ap_const_logic_1;
        else 
            comb_5_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_6_0_address0 <= zext_ln49_fu_704_p1(15 - 1 downto 0);

    comb_6_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            comb_6_0_ce0 <= ap_const_logic_1;
        else 
            comb_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_6_1_address0 <= zext_ln49_fu_704_p1(15 - 1 downto 0);

    comb_6_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            comb_6_1_ce0 <= ap_const_logic_1;
        else 
            comb_6_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_7_0_address0 <= zext_ln49_fu_704_p1(15 - 1 downto 0);

    comb_7_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            comb_7_0_ce0 <= ap_const_logic_1;
        else 
            comb_7_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_7_1_address0 <= zext_ln49_fu_704_p1(15 - 1 downto 0);

    comb_7_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            comb_7_1_ce0 <= ap_const_logic_1;
        else 
            comb_7_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_658_p2 <= std_logic_vector(unsigned(i_0_reg_590) + unsigned(ap_const_lv4_1));
    icmp_ln43_fu_606_p2 <= "1" when (unsigned(length_read_reg_841) > unsigned(ap_const_lv32_40000)) else "0";
    icmp_ln45_fu_618_p2 <= "1" when (select_ln43_reg_851 = ap_const_lv19_0) else "0";
    icmp_ln46_fu_639_p2 <= "1" when (unsigned(ndx_0_reg_578) < unsigned(select_ln45_reg_857)) else "0";
    icmp_ln48_fu_652_p2 <= "1" when (i_0_reg_590 = ap_const_lv4_8) else "0";
    icmp_ln56_fu_689_p2 <= "1" when (zext_ln46_reg_947 = add_ln56_reg_862) else "0";
    iout_TDATA <= (((((((ival_q0 & ival_q1) & ival_load_5_reg_1134) & ival_load_4_reg_1128) & ival_load_3_reg_1110) & ival_load_2_reg_1104) & ival_load_1_reg_1086) & ival_load_reg_1080);

    iout_TDATA_blk_n_assign_proc : process(iout_TREADY, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            iout_TDATA_blk_n <= iout_TREADY;
        else 
            iout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iout_TLAST <= and_ln56_reg_978(0);

    iout_TVALID_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            iout_TVALID <= ap_const_logic_1;
        else 
            iout_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    iqout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, iqout_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            iqout_TDATA_blk_n <= iqout_TREADY_int;
        else 
            iqout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iqout_TDATA_int <= (((((((((((((((qval_q0 & ival_q0) & qval_q1) & ival_q1) & qval_load_5_reg_1146) & ival_load_5_reg_1134) & qval_load_4_reg_1140) & ival_load_4_reg_1128) & qval_load_3_reg_1122) & ival_load_3_reg_1110) & qval_load_2_reg_1116) & ival_load_2_reg_1104) & qval_load_1_reg_1098) & ival_load_1_reg_1086) & qval_load_reg_1092) & ival_load_reg_1080);
    iqout_TLAST_int <= and_ln56_reg_978(0);
    iqout_TVALID <= regslice_both_iqout_data_U_vld_out;

    iqout_TVALID_int_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            iqout_TVALID_int <= ap_const_logic_1;
        else 
            iqout_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    ival_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state8, zext_ln49_1_fu_770_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ival_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ival_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ival_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ival_address0 <= zext_ln49_1_fu_770_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ival_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            ival_address0 <= "XXX";
        end if; 
    end process;


    ival_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ival_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ival_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ival_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ival_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            ival_address1 <= "XXX";
        end if; 
    end process;


    ival_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ival_ce0 <= ap_const_logic_1;
        else 
            ival_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ival_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ival_ce1 <= ap_const_logic_1;
        else 
            ival_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ival_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ival_we0 <= ap_const_logic_1;
        else 
            ival_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ndx_fu_698_p2 <= std_logic_vector(unsigned(ndx_0_reg_578) + unsigned(ap_const_lv19_8));

    qout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, qout_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            qout_TDATA_blk_n <= qout_TREADY_int;
        else 
            qout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    qout_TDATA_int <= (((((((qval_q0 & qval_q1) & qval_load_5_reg_1146) & qval_load_4_reg_1140) & qval_load_3_reg_1122) & qval_load_2_reg_1116) & qval_load_1_reg_1098) & qval_load_reg_1092);
    qout_TLAST_int <= and_ln56_reg_978(0);
    qout_TVALID <= regslice_both_qout_data_U_vld_out;

    qout_TVALID_int_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            qout_TVALID_int <= ap_const_logic_1;
        else 
            qout_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    qval_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state8, zext_ln49_1_fu_770_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            qval_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            qval_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            qval_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            qval_address0 <= zext_ln49_1_fu_770_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            qval_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            qval_address0 <= "XXX";
        end if; 
    end process;


    qval_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            qval_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            qval_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            qval_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            qval_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            qval_address1 <= "XXX";
        end if; 
    end process;


    qval_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            qval_ce0 <= ap_const_logic_1;
        else 
            qval_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    qval_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            qval_ce1 <= ap_const_logic_1;
        else 
            qval_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    qval_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            qval_we0 <= ap_const_logic_1;
        else 
            qval_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln43_fu_611_p3 <= 
        ap_const_lv19_40000 when (icmp_ln43_fu_606_p2(0) = '1') else 
        trunc_ln43_reg_846;
    select_ln45_fu_623_p3 <= 
        ap_const_lv19_1 when (icmp_ln45_fu_618_p2(0) = '1') else 
        select_ln43_reg_851;
    trunc_ln43_fu_602_p1 <= length_r(19 - 1 downto 0);
    trunc_ln49_fu_644_p1 <= ndx_0_reg_578(15 - 1 downto 0);
    zext_ln46_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ndx_0_reg_578),32));
    zext_ln48_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_590),19));
    zext_ln49_1_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_590),64));
    zext_ln49_2_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_590),15));
    zext_ln49_3_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_968),32));
    zext_ln49_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_1_reg_973),64));
end behav;
