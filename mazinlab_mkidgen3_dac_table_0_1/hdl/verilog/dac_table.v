// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dac_table,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.442687,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=512,HLS_SYN_DSP=0,HLS_SYN_FF=1954,HLS_SYN_LUT=1846,HLS_VERSION=2019_2_1}" *)

module dac_table (
        ap_clk,
        ap_rst_n,
        iout_TDATA,
        iout_TVALID,
        iout_TREADY,
        iout_TLAST,
        qout_TDATA,
        qout_TVALID,
        qout_TREADY,
        qout_TLAST,
        iqout_TDATA,
        iqout_TVALID,
        iqout_TREADY,
        iqout_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 21;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [127:0] iout_TDATA;
output   iout_TVALID;
input   iout_TREADY;
output   iout_TLAST;
output  [127:0] qout_TDATA;
output   qout_TVALID;
input   qout_TREADY;
output   qout_TLAST;
output  [255:0] iqout_TDATA;
output   iqout_TVALID;
input   iqout_TREADY;
output   iqout_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg iout_TVALID;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [14:0] comb_0_0_address0;
reg    comb_0_0_ce0;
wire   [15:0] comb_0_0_q0;
wire   [14:0] comb_0_1_address0;
reg    comb_0_1_ce0;
wire   [15:0] comb_0_1_q0;
wire   [14:0] comb_1_0_address0;
reg    comb_1_0_ce0;
wire   [15:0] comb_1_0_q0;
wire   [14:0] comb_1_1_address0;
reg    comb_1_1_ce0;
wire   [15:0] comb_1_1_q0;
wire   [14:0] comb_2_0_address0;
reg    comb_2_0_ce0;
wire   [15:0] comb_2_0_q0;
wire   [14:0] comb_2_1_address0;
reg    comb_2_1_ce0;
wire   [15:0] comb_2_1_q0;
wire   [14:0] comb_3_0_address0;
reg    comb_3_0_ce0;
wire   [15:0] comb_3_0_q0;
wire   [14:0] comb_3_1_address0;
reg    comb_3_1_ce0;
wire   [15:0] comb_3_1_q0;
wire   [14:0] comb_4_0_address0;
reg    comb_4_0_ce0;
wire   [15:0] comb_4_0_q0;
wire   [14:0] comb_4_1_address0;
reg    comb_4_1_ce0;
wire   [15:0] comb_4_1_q0;
wire   [14:0] comb_5_0_address0;
reg    comb_5_0_ce0;
wire   [15:0] comb_5_0_q0;
wire   [14:0] comb_5_1_address0;
reg    comb_5_1_ce0;
wire   [15:0] comb_5_1_q0;
wire   [14:0] comb_6_0_address0;
reg    comb_6_0_ce0;
wire   [15:0] comb_6_0_q0;
wire   [14:0] comb_6_1_address0;
reg    comb_6_1_ce0;
wire   [15:0] comb_6_1_q0;
wire   [14:0] comb_7_0_address0;
reg    comb_7_0_ce0;
wire   [15:0] comb_7_0_q0;
wire   [14:0] comb_7_1_address0;
reg    comb_7_1_ce0;
wire   [15:0] comb_7_1_q0;
wire   [31:0] length_r;
wire    tlast;
wire   [31:0] tlast_length;
reg    iout_TDATA_blk_n;
wire    ap_CS_fsm_state12;
reg    qout_TDATA_blk_n;
wire    ap_CS_fsm_state13;
reg    iqout_TDATA_blk_n;
reg   [31:0] tlast_length_read_reg_831;
reg   [0:0] tlast_read_reg_836;
reg   [31:0] length_read_reg_841;
wire   [18:0] trunc_ln43_fu_602_p1;
reg   [18:0] trunc_ln43_reg_846;
wire   [18:0] select_ln43_fu_611_p3;
reg   [18:0] select_ln43_reg_851;
wire    ap_CS_fsm_state2;
wire   [18:0] select_ln45_fu_623_p3;
reg   [18:0] select_ln45_reg_857;
wire    ap_CS_fsm_state3;
wire   [31:0] add_ln56_fu_630_p2;
reg   [31:0] add_ln56_reg_862;
wire   [31:0] zext_ln46_fu_635_p1;
reg   [31:0] zext_ln46_reg_947;
wire    ap_CS_fsm_state4;
wire    regslice_both_qout_data_U_apdone_blk;
wire    regslice_both_iqout_data_U_apdone_blk;
reg    ap_block_state4;
wire   [14:0] trunc_ln49_fu_644_p1;
reg   [14:0] trunc_ln49_reg_955;
wire   [0:0] icmp_ln46_fu_639_p2;
wire   [3:0] i_fu_658_p2;
reg   [3:0] i_reg_963;
wire    ap_CS_fsm_state5;
reg   [3:0] lshr_ln_reg_968;
wire   [0:0] icmp_ln48_fu_652_p2;
wire   [14:0] add_ln49_1_fu_684_p2;
reg   [14:0] add_ln49_1_reg_973;
wire   [0:0] and_ln56_fu_693_p2;
reg   [0:0] and_ln56_reg_978;
wire   [18:0] ndx_fu_698_p2;
reg   [18:0] ndx_reg_985;
wire    ap_CS_fsm_state6;
wire   [15:0] tmp_3_fu_726_p10;
reg   [15:0] tmp_3_reg_1070;
wire    ap_CS_fsm_state7;
wire   [15:0] tmp_4_fu_748_p10;
reg   [15:0] tmp_4_reg_1075;
wire   [15:0] ival_q0;
reg   [15:0] ival_load_reg_1080;
wire    ap_CS_fsm_state9;
wire   [15:0] ival_q1;
reg   [15:0] ival_load_1_reg_1086;
wire   [15:0] qval_q0;
reg   [15:0] qval_load_reg_1092;
wire   [15:0] qval_q1;
reg   [15:0] qval_load_1_reg_1098;
reg   [15:0] ival_load_2_reg_1104;
wire    ap_CS_fsm_state10;
reg   [15:0] ival_load_3_reg_1110;
reg   [15:0] qval_load_2_reg_1116;
reg   [15:0] qval_load_3_reg_1122;
reg   [15:0] ival_load_4_reg_1128;
wire    ap_CS_fsm_state11;
reg   [15:0] ival_load_5_reg_1134;
reg   [15:0] qval_load_4_reg_1140;
reg   [15:0] qval_load_5_reg_1146;
reg    ap_block_state12_io;
reg   [2:0] ival_address0;
reg    ival_ce0;
reg    ival_we0;
reg   [2:0] ival_address1;
reg    ival_ce1;
reg   [2:0] qval_address0;
reg    qval_ce0;
reg    qval_we0;
reg   [2:0] qval_address1;
reg    qval_ce1;
reg   [18:0] ndx_0_reg_578;
reg    ap_block_state13_io;
reg   [3:0] i_0_reg_590;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln49_fu_704_p1;
wire   [63:0] zext_ln49_1_fu_770_p1;
wire   [0:0] icmp_ln43_fu_606_p2;
wire   [0:0] icmp_ln45_fu_618_p2;
wire   [18:0] zext_ln48_fu_648_p1;
wire   [18:0] add_ln49_fu_668_p2;
wire   [14:0] zext_ln49_2_fu_664_p1;
wire   [0:0] icmp_ln56_fu_689_p2;
wire   [31:0] zext_ln49_3_fu_723_p1;
reg   [12:0] ap_NS_fsm;
wire   [127:0] qout_TDATA_int;
reg    qout_TVALID_int;
wire    qout_TREADY_int;
wire    regslice_both_qout_data_U_vld_out;
wire    regslice_both_w1_qout_last_U_apdone_blk;
wire    qout_TLAST_int;
wire    regslice_both_w1_qout_last_U_ack_in_dummy;
wire    regslice_both_w1_qout_last_U_vld_out;
wire   [255:0] iqout_TDATA_int;
reg    iqout_TVALID_int;
wire    iqout_TREADY_int;
wire    regslice_both_iqout_data_U_vld_out;
wire    regslice_both_w1_iqout_last_U_apdone_blk;
wire    iqout_TLAST_int;
wire    regslice_both_w1_iqout_last_U_ack_in_dummy;
wire    regslice_both_w1_iqout_last_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

dac_table_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
dac_table_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .comb_0_0_address0(comb_0_0_address0),
    .comb_0_0_ce0(comb_0_0_ce0),
    .comb_0_0_q0(comb_0_0_q0),
    .comb_0_1_address0(comb_0_1_address0),
    .comb_0_1_ce0(comb_0_1_ce0),
    .comb_0_1_q0(comb_0_1_q0),
    .comb_1_0_address0(comb_1_0_address0),
    .comb_1_0_ce0(comb_1_0_ce0),
    .comb_1_0_q0(comb_1_0_q0),
    .comb_1_1_address0(comb_1_1_address0),
    .comb_1_1_ce0(comb_1_1_ce0),
    .comb_1_1_q0(comb_1_1_q0),
    .comb_2_0_address0(comb_2_0_address0),
    .comb_2_0_ce0(comb_2_0_ce0),
    .comb_2_0_q0(comb_2_0_q0),
    .comb_2_1_address0(comb_2_1_address0),
    .comb_2_1_ce0(comb_2_1_ce0),
    .comb_2_1_q0(comb_2_1_q0),
    .comb_3_0_address0(comb_3_0_address0),
    .comb_3_0_ce0(comb_3_0_ce0),
    .comb_3_0_q0(comb_3_0_q0),
    .comb_3_1_address0(comb_3_1_address0),
    .comb_3_1_ce0(comb_3_1_ce0),
    .comb_3_1_q0(comb_3_1_q0),
    .comb_4_0_address0(comb_4_0_address0),
    .comb_4_0_ce0(comb_4_0_ce0),
    .comb_4_0_q0(comb_4_0_q0),
    .comb_4_1_address0(comb_4_1_address0),
    .comb_4_1_ce0(comb_4_1_ce0),
    .comb_4_1_q0(comb_4_1_q0),
    .comb_5_0_address0(comb_5_0_address0),
    .comb_5_0_ce0(comb_5_0_ce0),
    .comb_5_0_q0(comb_5_0_q0),
    .comb_5_1_address0(comb_5_1_address0),
    .comb_5_1_ce0(comb_5_1_ce0),
    .comb_5_1_q0(comb_5_1_q0),
    .comb_6_0_address0(comb_6_0_address0),
    .comb_6_0_ce0(comb_6_0_ce0),
    .comb_6_0_q0(comb_6_0_q0),
    .comb_6_1_address0(comb_6_1_address0),
    .comb_6_1_ce0(comb_6_1_ce0),
    .comb_6_1_q0(comb_6_1_q0),
    .comb_7_0_address0(comb_7_0_address0),
    .comb_7_0_ce0(comb_7_0_ce0),
    .comb_7_0_q0(comb_7_0_q0),
    .comb_7_1_address0(comb_7_1_address0),
    .comb_7_1_ce0(comb_7_1_ce0),
    .comb_7_1_q0(comb_7_1_q0),
    .length_r(length_r),
    .tlast(tlast),
    .tlast_length(tlast_length)
);

dac_table_ival #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
ival_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ival_address0),
    .ce0(ival_ce0),
    .we0(ival_we0),
    .d0(tmp_3_reg_1070),
    .q0(ival_q0),
    .address1(ival_address1),
    .ce1(ival_ce1),
    .q1(ival_q1)
);

dac_table_ival #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
qval_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(qval_address0),
    .ce0(qval_ce0),
    .we0(qval_we0),
    .d0(tmp_4_reg_1075),
    .q0(qval_q0),
    .address1(qval_address1),
    .ce1(qval_ce1),
    .q1(qval_q1)
);

dac_table_mux_832bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
dac_table_mux_832bkb_U1(
    .din0(comb_0_0_q0),
    .din1(comb_1_0_q0),
    .din2(comb_2_0_q0),
    .din3(comb_3_0_q0),
    .din4(comb_4_0_q0),
    .din5(comb_5_0_q0),
    .din6(comb_6_0_q0),
    .din7(comb_7_0_q0),
    .din8(zext_ln49_3_fu_723_p1),
    .dout(tmp_3_fu_726_p10)
);

dac_table_mux_832bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
dac_table_mux_832bkb_U2(
    .din0(comb_0_1_q0),
    .din1(comb_1_1_q0),
    .din2(comb_2_1_q0),
    .din3(comb_3_1_q0),
    .din4(comb_4_1_q0),
    .din5(comb_5_1_q0),
    .din6(comb_6_1_q0),
    .din7(comb_7_1_q0),
    .din8(zext_ln49_3_fu_723_p1),
    .dout(tmp_4_fu_748_p10)
);

regslice_both #(
    .DataWidth( 128 ))
regslice_both_qout_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(qout_TDATA_int),
    .vld_in(qout_TVALID_int),
    .ack_in(qout_TREADY_int),
    .data_out(qout_TDATA),
    .vld_out(regslice_both_qout_data_U_vld_out),
    .ack_out(qout_TREADY),
    .apdone_blk(regslice_both_qout_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_qout_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(qout_TLAST_int),
    .vld_in(qout_TVALID_int),
    .ack_in(regslice_both_w1_qout_last_U_ack_in_dummy),
    .data_out(qout_TLAST),
    .vld_out(regslice_both_w1_qout_last_U_vld_out),
    .ack_out(qout_TREADY),
    .apdone_blk(regslice_both_w1_qout_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 256 ))
regslice_both_iqout_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iqout_TDATA_int),
    .vld_in(iqout_TVALID_int),
    .ack_in(iqout_TREADY_int),
    .data_out(iqout_TDATA),
    .vld_out(regslice_both_iqout_data_U_vld_out),
    .ack_out(iqout_TREADY),
    .apdone_blk(regslice_both_iqout_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_iqout_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iqout_TLAST_int),
    .vld_in(iqout_TVALID_int),
    .ack_in(regslice_both_w1_iqout_last_U_ack_in_dummy),
    .data_out(iqout_TLAST),
    .vld_out(regslice_both_w1_iqout_last_U_vld_out),
    .ack_out(iqout_TREADY),
    .apdone_blk(regslice_both_w1_iqout_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_iqout_data_U_apdone_blk == 1'b1) | (regslice_both_qout_data_U_apdone_blk == 1'b1)) & (icmp_ln46_fu_639_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_590 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_reg_590 <= i_reg_963;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13))) begin
        ndx_0_reg_578 <= ndx_reg_985;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ndx_0_reg_578 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_652_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln49_1_reg_973 <= add_ln49_1_fu_684_p2;
        lshr_ln_reg_968 <= {{add_ln49_fu_668_p2[18:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln56_reg_862 <= add_ln56_fu_630_p2;
        select_ln45_reg_857 <= select_ln45_fu_623_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_652_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        and_ln56_reg_978 <= and_ln56_fu_693_p2;
        ndx_reg_985 <= ndx_fu_698_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_963 <= i_fu_658_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ival_load_1_reg_1086 <= ival_q1;
        ival_load_reg_1080 <= ival_q0;
        qval_load_1_reg_1098 <= qval_q1;
        qval_load_reg_1092 <= qval_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ival_load_2_reg_1104 <= ival_q1;
        ival_load_3_reg_1110 <= ival_q0;
        qval_load_2_reg_1116 <= qval_q1;
        qval_load_3_reg_1122 <= qval_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ival_load_4_reg_1128 <= ival_q1;
        ival_load_5_reg_1134 <= ival_q0;
        qval_load_4_reg_1140 <= qval_q1;
        qval_load_5_reg_1146 <= qval_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        length_read_reg_841 <= length_r;
        tlast_length_read_reg_831 <= tlast_length;
        tlast_read_reg_836 <= tlast;
        trunc_ln43_reg_846 <= trunc_ln43_fu_602_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        select_ln43_reg_851 <= select_ln43_fu_611_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_3_reg_1070 <= tmp_3_fu_726_p10;
        tmp_4_reg_1075 <= tmp_4_fu_748_p10;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_iqout_data_U_apdone_blk == 1'b1) | (regslice_both_qout_data_U_apdone_blk == 1'b1)) & (icmp_ln46_fu_639_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        trunc_ln49_reg_955 <= trunc_ln49_fu_644_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_iqout_data_U_apdone_blk == 1'b1) | (regslice_both_qout_data_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln46_reg_947[18 : 0] <= zext_ln46_fu_635_p1[18 : 0];
    end
end

always @ (*) begin
    if ((~((regslice_both_iqout_data_U_apdone_blk == 1'b1) | (regslice_both_qout_data_U_apdone_blk == 1'b1)) & (icmp_ln46_fu_639_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_iqout_data_U_apdone_blk == 1'b1) | (regslice_both_qout_data_U_apdone_blk == 1'b1)) & (icmp_ln46_fu_639_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        comb_0_0_ce0 = 1'b1;
    end else begin
        comb_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        comb_0_1_ce0 = 1'b1;
    end else begin
        comb_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        comb_1_0_ce0 = 1'b1;
    end else begin
        comb_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        comb_1_1_ce0 = 1'b1;
    end else begin
        comb_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        comb_2_0_ce0 = 1'b1;
    end else begin
        comb_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        comb_2_1_ce0 = 1'b1;
    end else begin
        comb_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        comb_3_0_ce0 = 1'b1;
    end else begin
        comb_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        comb_3_1_ce0 = 1'b1;
    end else begin
        comb_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        comb_4_0_ce0 = 1'b1;
    end else begin
        comb_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        comb_4_1_ce0 = 1'b1;
    end else begin
        comb_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        comb_5_0_ce0 = 1'b1;
    end else begin
        comb_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        comb_5_1_ce0 = 1'b1;
    end else begin
        comb_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        comb_6_0_ce0 = 1'b1;
    end else begin
        comb_6_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        comb_6_1_ce0 = 1'b1;
    end else begin
        comb_6_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        comb_7_0_ce0 = 1'b1;
    end else begin
        comb_7_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        comb_7_1_ce0 = 1'b1;
    end else begin
        comb_7_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        iout_TDATA_blk_n = iout_TREADY;
    end else begin
        iout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state12_io) & (1'b1 == ap_CS_fsm_state12))) begin
        iout_TVALID = 1'b1;
    end else begin
        iout_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        iqout_TDATA_blk_n = iqout_TREADY_int;
    end else begin
        iqout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state12_io) & (1'b1 == ap_CS_fsm_state12))) begin
        iqout_TVALID_int = 1'b1;
    end else begin
        iqout_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ival_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ival_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        ival_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ival_address0 = zext_ln49_1_fu_770_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ival_address0 = 64'd0;
    end else begin
        ival_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ival_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ival_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        ival_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ival_address1 = 64'd1;
    end else begin
        ival_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        ival_ce0 = 1'b1;
    end else begin
        ival_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        ival_ce1 = 1'b1;
    end else begin
        ival_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ival_we0 = 1'b1;
    end else begin
        ival_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        qout_TDATA_blk_n = qout_TREADY_int;
    end else begin
        qout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state12_io) & (1'b1 == ap_CS_fsm_state12))) begin
        qout_TVALID_int = 1'b1;
    end else begin
        qout_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        qval_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        qval_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        qval_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        qval_address0 = zext_ln49_1_fu_770_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        qval_address0 = 64'd0;
    end else begin
        qval_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        qval_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        qval_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        qval_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        qval_address1 = 64'd1;
    end else begin
        qval_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        qval_ce0 = 1'b1;
    end else begin
        qval_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        qval_ce1 = 1'b1;
    end else begin
        qval_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        qval_we0 = 1'b1;
    end else begin
        qval_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((regslice_both_iqout_data_U_apdone_blk == 1'b1) | (regslice_both_qout_data_U_apdone_blk == 1'b1)) & (icmp_ln46_fu_639_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((regslice_both_iqout_data_U_apdone_blk == 1'b1) | (regslice_both_qout_data_U_apdone_blk == 1'b1)) & (icmp_ln46_fu_639_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln48_fu_652_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b0 == ap_block_state12_io) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln49_1_fu_684_p2 = (zext_ln49_2_fu_664_p1 + trunc_ln49_reg_955);

assign add_ln49_fu_668_p2 = (ndx_0_reg_578 + zext_ln48_fu_648_p1);

assign add_ln56_fu_630_p2 = ($signed(32'd4294967295) + $signed(tlast_length_read_reg_831));

assign and_ln56_fu_693_p2 = (tlast_read_reg_836 & icmp_ln56_fu_689_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state12_io = ((iqout_TREADY_int == 1'b0) | (qout_TREADY_int == 1'b0) | (iout_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state13_io = ((iqout_TREADY_int == 1'b0) | (qout_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((regslice_both_iqout_data_U_apdone_blk == 1'b1) | (regslice_both_qout_data_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign comb_0_0_address0 = zext_ln49_fu_704_p1;

assign comb_0_1_address0 = zext_ln49_fu_704_p1;

assign comb_1_0_address0 = zext_ln49_fu_704_p1;

assign comb_1_1_address0 = zext_ln49_fu_704_p1;

assign comb_2_0_address0 = zext_ln49_fu_704_p1;

assign comb_2_1_address0 = zext_ln49_fu_704_p1;

assign comb_3_0_address0 = zext_ln49_fu_704_p1;

assign comb_3_1_address0 = zext_ln49_fu_704_p1;

assign comb_4_0_address0 = zext_ln49_fu_704_p1;

assign comb_4_1_address0 = zext_ln49_fu_704_p1;

assign comb_5_0_address0 = zext_ln49_fu_704_p1;

assign comb_5_1_address0 = zext_ln49_fu_704_p1;

assign comb_6_0_address0 = zext_ln49_fu_704_p1;

assign comb_6_1_address0 = zext_ln49_fu_704_p1;

assign comb_7_0_address0 = zext_ln49_fu_704_p1;

assign comb_7_1_address0 = zext_ln49_fu_704_p1;

assign i_fu_658_p2 = (i_0_reg_590 + 4'd1);

assign icmp_ln43_fu_606_p2 = ((length_read_reg_841 > 32'd262144) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_618_p2 = ((select_ln43_reg_851 == 19'd0) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_639_p2 = ((ndx_0_reg_578 < select_ln45_reg_857) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_652_p2 = ((i_0_reg_590 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_689_p2 = ((zext_ln46_reg_947 == add_ln56_reg_862) ? 1'b1 : 1'b0);

assign iout_TDATA = {{{{{{{{ival_q0}, {ival_q1}}, {ival_load_5_reg_1134}}, {ival_load_4_reg_1128}}, {ival_load_3_reg_1110}}, {ival_load_2_reg_1104}}, {ival_load_1_reg_1086}}, {ival_load_reg_1080}};

assign iout_TLAST = and_ln56_reg_978;

assign iqout_TDATA_int = {{{{{{{{{{{{{{{{qval_q0}, {ival_q0}}, {qval_q1}}, {ival_q1}}, {qval_load_5_reg_1146}}, {ival_load_5_reg_1134}}, {qval_load_4_reg_1140}}, {ival_load_4_reg_1128}}, {qval_load_3_reg_1122}}, {ival_load_3_reg_1110}}, {qval_load_2_reg_1116}}, {ival_load_2_reg_1104}}, {qval_load_1_reg_1098}}, {ival_load_1_reg_1086}}, {qval_load_reg_1092}}, {ival_load_reg_1080}};

assign iqout_TLAST_int = and_ln56_reg_978;

assign iqout_TVALID = regslice_both_iqout_data_U_vld_out;

assign ndx_fu_698_p2 = (ndx_0_reg_578 + 19'd8);

assign qout_TDATA_int = {{{{{{{{qval_q0}, {qval_q1}}, {qval_load_5_reg_1146}}, {qval_load_4_reg_1140}}, {qval_load_3_reg_1122}}, {qval_load_2_reg_1116}}, {qval_load_1_reg_1098}}, {qval_load_reg_1092}};

assign qout_TLAST_int = and_ln56_reg_978;

assign qout_TVALID = regslice_both_qout_data_U_vld_out;

assign select_ln43_fu_611_p3 = ((icmp_ln43_fu_606_p2[0:0] === 1'b1) ? 19'd262144 : trunc_ln43_reg_846);

assign select_ln45_fu_623_p3 = ((icmp_ln45_fu_618_p2[0:0] === 1'b1) ? 19'd1 : select_ln43_reg_851);

assign trunc_ln43_fu_602_p1 = length_r[18:0];

assign trunc_ln49_fu_644_p1 = ndx_0_reg_578[14:0];

assign zext_ln46_fu_635_p1 = ndx_0_reg_578;

assign zext_ln48_fu_648_p1 = i_0_reg_590;

assign zext_ln49_1_fu_770_p1 = i_0_reg_590;

assign zext_ln49_2_fu_664_p1 = i_0_reg_590;

assign zext_ln49_3_fu_723_p1 = lshr_ln_reg_968;

assign zext_ln49_fu_704_p1 = add_ln49_1_reg_973;

always @ (posedge ap_clk) begin
    zext_ln46_reg_947[31:19] <= 13'b0000000000000;
end

endmodule //dac_table
