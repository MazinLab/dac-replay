-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dac_table_axim_dac_table_axim_Pipeline_runloop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    replay_length : IN STD_LOGIC_VECTOR (14 downto 0);
    tlast : IN STD_LOGIC_VECTOR (0 downto 0);
    iout_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    iout_TVALID : OUT STD_LOGIC;
    iout_TREADY : IN STD_LOGIC;
    iout_TKEEP : OUT STD_LOGIC_VECTOR (31 downto 0);
    iout_TSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    iout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    qout_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    qout_TVALID : OUT STD_LOGIC;
    qout_TREADY : IN STD_LOGIC;
    qout_TKEEP : OUT STD_LOGIC_VECTOR (31 downto 0);
    qout_TSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    qout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    iqout_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    iqout_TVALID : OUT STD_LOGIC;
    iqout_TREADY : IN STD_LOGIC;
    iqout_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    iqout_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    iqout_TUSER : OUT STD_LOGIC_VECTOR (7 downto 0);
    iqout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    length_r : IN STD_LOGIC_VECTOR (14 downto 0);
    comb2wide_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    comb2wide_V_ce0 : OUT STD_LOGIC;
    comb2wide_V_q0 : IN STD_LOGIC_VECTOR (1023 downto 0) );
end;


architecture behav of dac_table_axim_dac_table_axim_Pipeline_runloop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv32_300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000000";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv32_20F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001111";
    constant ap_const_lv32_30F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100001111";
    constant ap_const_lv32_210 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000010000";
    constant ap_const_lv32_21F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011111";
    constant ap_const_lv32_310 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100010000";
    constant ap_const_lv32_31F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100011111";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_22F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000101111";
    constant ap_const_lv32_320 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100100000";
    constant ap_const_lv32_32F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100101111";
    constant ap_const_lv32_230 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000110000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_330 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100110000";
    constant ap_const_lv32_33F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_24F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001001111";
    constant ap_const_lv32_340 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101000000";
    constant ap_const_lv32_34F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101001111";
    constant ap_const_lv32_250 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001010000";
    constant ap_const_lv32_25F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011111";
    constant ap_const_lv32_350 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101010000";
    constant ap_const_lv32_35F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101011111";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_26F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001101111";
    constant ap_const_lv32_360 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101100000";
    constant ap_const_lv32_36F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101101111";
    constant ap_const_lv32_270 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001110000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv32_370 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101110000";
    constant ap_const_lv32_37F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101111111";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_28F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010001111";
    constant ap_const_lv32_380 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110000000";
    constant ap_const_lv32_38F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110001111";
    constant ap_const_lv32_290 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010010000";
    constant ap_const_lv32_29F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011111";
    constant ap_const_lv32_390 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110010000";
    constant ap_const_lv32_39F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110011111";
    constant ap_const_lv32_2A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010100000";
    constant ap_const_lv32_2AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010101111";
    constant ap_const_lv32_3A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110100000";
    constant ap_const_lv32_3AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110101111";
    constant ap_const_lv32_2B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010110000";
    constant ap_const_lv32_2BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111111";
    constant ap_const_lv32_3B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110110000";
    constant ap_const_lv32_3BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110111111";
    constant ap_const_lv32_2C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000000";
    constant ap_const_lv32_2CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011001111";
    constant ap_const_lv32_3C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111000000";
    constant ap_const_lv32_3CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111001111";
    constant ap_const_lv32_2D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011010000";
    constant ap_const_lv32_2DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011011111";
    constant ap_const_lv32_3D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111010000";
    constant ap_const_lv32_3DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111011111";
    constant ap_const_lv32_2E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011100000";
    constant ap_const_lv32_2EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011101111";
    constant ap_const_lv32_3E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111100000";
    constant ap_const_lv32_3EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111101111";
    constant ap_const_lv32_2F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011110000";
    constant ap_const_lv32_3F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111110000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal iout_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal qout_TDATA_blk_n : STD_LOGIC;
    signal iqout_TDATA_blk_n : STD_LOGIC;
    signal empty_fu_494_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_1423 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal set_last_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal set_last_reg_1427 : STD_LOGIC_VECTOR (0 downto 0);
    signal iqtmp_user_V_fu_537_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal iqtmp_user_V_reg_1439 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_iqtmpdat_phi_fu_451_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal iq_V_7_s_fu_1319_p33 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter1_iqtmpdat_reg_448 : STD_LOGIC_VECTOR (511 downto 0);
    signal iq_V_6_s_fu_900_p33 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_qtmpdat_phi_fu_461_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_phi_reg_pp0_iter1_qtmpdat_reg_458 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_phi_mux_itmpdat_phi_fu_471_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_phi_reg_pp0_iter1_itmpdat_reg_468 : STD_LOGIC_VECTOR (255 downto 0);
    signal i_V_fu_570_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal zext_ln573_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_348 : STD_LOGIC_VECTOR (14 downto 0);
    signal sample_V_fu_552_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal last_counter_V_fu_352 : STD_LOGIC_VECTOR (14 downto 0);
    signal last_counter_V_5_fu_510_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_1_fu_356 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln1049_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_counter_V_4_fu_504_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_fu_522_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1049_1_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln223_fu_546_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_21_14_fu_890_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_14_fu_880_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_13_fu_870_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_13_fu_860_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_12_fu_850_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_12_fu_840_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_11_fu_830_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_11_fu_820_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_10_fu_810_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_10_fu_800_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_s_fu_790_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_s_fu_780_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_9_fu_770_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_9_fu_760_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_8_fu_750_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_8_fu_740_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_7_fu_730_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_7_fu_720_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_6_fu_710_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_6_fu_700_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_5_fu_690_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_5_fu_680_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_4_fu_670_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_4_fu_660_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_3_fu_650_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_3_fu_640_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_2_fu_630_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_2_fu_620_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_1_fu_610_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_1_fu_600_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_fu_590_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln674_fu_586_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_14_fu_1309_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_14_fu_1299_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_13_fu_1289_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_13_fu_1279_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_12_fu_1269_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_12_fu_1259_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_11_fu_1249_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_11_fu_1239_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_10_fu_1229_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_10_fu_1219_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_s_fu_1209_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_s_fu_1199_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_9_fu_1189_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_9_fu_1179_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_8_fu_1169_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_8_fu_1159_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_7_fu_1149_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_7_fu_1139_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_6_fu_1129_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_6_fu_1119_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_5_fu_1109_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_5_fu_1099_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_4_fu_1089_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_4_fu_1079_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_3_fu_1069_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_3_fu_1059_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_2_fu_1049_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_2_fu_1039_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_27_1_fu_1029_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_1_fu_1019_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_3_fu_1009_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_2_fu_999_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    last_counter_V_fu_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                last_counter_V_fu_352 <= replay_length;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                last_counter_V_fu_352 <= last_counter_V_5_fu_510_p3;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_fu_348 <= ap_const_lv15_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                p_Val2_s_fu_348 <= sample_V_fu_552_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_reg_1423 <= empty_fu_494_p1;
                iqtmp_user_V_reg_1439 <= iqtmp_user_V_fu_537_p1;
                set_last_reg_1427 <= set_last_fu_517_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_reg_1423 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Val2_1_fu_356 <= comb2wide_V_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln223_fu_546_p2 <= std_logic_vector(unsigned(p_Val2_s_fu_348) + unsigned(ap_const_lv15_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(iout_TREADY, qout_TREADY, iqout_TREADY, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((iqout_TREADY = ap_const_logic_0) or (qout_TREADY = ap_const_logic_0) or (iout_TREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(iout_TREADY, qout_TREADY, iqout_TREADY, ap_enable_reg_pp0_iter1, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((iqout_TREADY = ap_const_logic_0) or (qout_TREADY = ap_const_logic_0) or (iout_TREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(iout_TREADY, qout_TREADY, iqout_TREADY, ap_enable_reg_pp0_iter1, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((iqout_TREADY = ap_const_logic_0) or (qout_TREADY = ap_const_logic_0) or (iout_TREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(iout_TREADY, qout_TREADY, iqout_TREADY)
    begin
                ap_block_state3_io <= ((iqout_TREADY = ap_const_logic_0) or (qout_TREADY = ap_const_logic_0) or (iout_TREADY = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(iout_TREADY, qout_TREADY, iqout_TREADY)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((iqout_TREADY = ap_const_logic_0) or (qout_TREADY = ap_const_logic_0) or (iout_TREADY = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_iqtmpdat_phi_fu_451_p4_assign_proc : process(empty_reg_1423, iq_V_7_s_fu_1319_p33, ap_phi_reg_pp0_iter1_iqtmpdat_reg_448, iq_V_6_s_fu_900_p33)
    begin
        if ((empty_reg_1423 = ap_const_lv1_0)) then 
            ap_phi_mux_iqtmpdat_phi_fu_451_p4 <= iq_V_6_s_fu_900_p33;
        elsif ((empty_reg_1423 = ap_const_lv1_1)) then 
            ap_phi_mux_iqtmpdat_phi_fu_451_p4 <= iq_V_7_s_fu_1319_p33;
        else 
            ap_phi_mux_iqtmpdat_phi_fu_451_p4 <= ap_phi_reg_pp0_iter1_iqtmpdat_reg_448;
        end if; 
    end process;


    ap_phi_mux_itmpdat_phi_fu_471_p4_assign_proc : process(empty_reg_1423, ap_phi_reg_pp0_iter1_itmpdat_reg_468, i_V_fu_570_p1, p_Val2_1_fu_356)
    begin
        if ((empty_reg_1423 = ap_const_lv1_0)) then 
            ap_phi_mux_itmpdat_phi_fu_471_p4 <= i_V_fu_570_p1;
        elsif ((empty_reg_1423 = ap_const_lv1_1)) then 
            ap_phi_mux_itmpdat_phi_fu_471_p4 <= p_Val2_1_fu_356(767 downto 512);
        else 
            ap_phi_mux_itmpdat_phi_fu_471_p4 <= ap_phi_reg_pp0_iter1_itmpdat_reg_468;
        end if; 
    end process;


    ap_phi_mux_qtmpdat_phi_fu_461_p4_assign_proc : process(comb2wide_V_q0, empty_reg_1423, ap_phi_reg_pp0_iter1_qtmpdat_reg_458, p_Val2_1_fu_356)
    begin
        if ((empty_reg_1423 = ap_const_lv1_0)) then 
            ap_phi_mux_qtmpdat_phi_fu_461_p4 <= comb2wide_V_q0(511 downto 256);
        elsif ((empty_reg_1423 = ap_const_lv1_1)) then 
            ap_phi_mux_qtmpdat_phi_fu_461_p4 <= p_Val2_1_fu_356(1023 downto 768);
        else 
            ap_phi_mux_qtmpdat_phi_fu_461_p4 <= ap_phi_reg_pp0_iter1_qtmpdat_reg_458;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_iqtmpdat_reg_448 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_itmpdat_reg_468 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_qtmpdat_reg_458 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= ap_const_logic_0;
    comb2wide_V_address0 <= zext_ln573_fu_532_p1(14 - 1 downto 0);

    comb2wide_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            comb2wide_V_ce0 <= ap_const_logic_1;
        else 
            comb2wide_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_494_p1 <= p_Val2_s_fu_348(1 - 1 downto 0);
    i_V_fu_570_p1 <= comb2wide_V_q0(256 - 1 downto 0);
    icmp_ln1049_1_fu_541_p2 <= "1" when (p_Val2_s_fu_348 = length_r) else "0";
    icmp_ln1049_fu_498_p2 <= "1" when (last_counter_V_fu_352 = ap_const_lv15_0) else "0";
    iout_TDATA <= ap_phi_mux_itmpdat_phi_fu_471_p4;

    iout_TDATA_blk_n_assign_proc : process(iout_TREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iout_TDATA_blk_n <= iout_TREADY;
        else 
            iout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iout_TKEEP <= ap_const_lv32_0;
    iout_TLAST <= set_last_reg_1427;
    iout_TSTRB <= ap_const_lv32_0;

    iout_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iout_TVALID <= ap_const_logic_1;
        else 
            iout_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iq_V_6_s_fu_900_p33 <= (((((((((((((((((((((((((((((((p_Result_21_14_fu_890_p4 & p_Result_19_14_fu_880_p4) & p_Result_21_13_fu_870_p4) & p_Result_19_13_fu_860_p4) & p_Result_21_12_fu_850_p4) & p_Result_19_12_fu_840_p4) & p_Result_21_11_fu_830_p4) & p_Result_19_11_fu_820_p4) & p_Result_21_10_fu_810_p4) & p_Result_19_10_fu_800_p4) & p_Result_21_s_fu_790_p4) & p_Result_19_s_fu_780_p4) & p_Result_21_9_fu_770_p4) & p_Result_19_9_fu_760_p4) & p_Result_21_8_fu_750_p4) & p_Result_19_8_fu_740_p4) & p_Result_21_7_fu_730_p4) & p_Result_19_7_fu_720_p4) & p_Result_21_6_fu_710_p4) & p_Result_19_6_fu_700_p4) & p_Result_21_5_fu_690_p4) & p_Result_19_5_fu_680_p4) & p_Result_21_4_fu_670_p4) & p_Result_19_4_fu_660_p4) & p_Result_21_3_fu_650_p4) & p_Result_19_3_fu_640_p4) & p_Result_21_2_fu_630_p4) & p_Result_19_2_fu_620_p4) & p_Result_21_1_fu_610_p4) & p_Result_19_1_fu_600_p4) & p_Result_1_fu_590_p4) & trunc_ln674_fu_586_p1);
    iq_V_7_s_fu_1319_p33 <= (((((((((((((((((((((((((((((((p_Result_27_14_fu_1309_p4 & p_Result_25_14_fu_1299_p4) & p_Result_27_13_fu_1289_p4) & p_Result_25_13_fu_1279_p4) & p_Result_27_12_fu_1269_p4) & p_Result_25_12_fu_1259_p4) & p_Result_27_11_fu_1249_p4) & p_Result_25_11_fu_1239_p4) & p_Result_27_10_fu_1229_p4) & p_Result_25_10_fu_1219_p4) & p_Result_27_s_fu_1209_p4) & p_Result_25_s_fu_1199_p4) & p_Result_27_9_fu_1189_p4) & p_Result_25_9_fu_1179_p4) & p_Result_27_8_fu_1169_p4) & p_Result_25_8_fu_1159_p4) & p_Result_27_7_fu_1149_p4) & p_Result_25_7_fu_1139_p4) & p_Result_27_6_fu_1129_p4) & p_Result_25_6_fu_1119_p4) & p_Result_27_5_fu_1109_p4) & p_Result_25_5_fu_1099_p4) & p_Result_27_4_fu_1089_p4) & p_Result_25_4_fu_1079_p4) & p_Result_27_3_fu_1069_p4) & p_Result_25_3_fu_1059_p4) & p_Result_27_2_fu_1049_p4) & p_Result_25_2_fu_1039_p4) & p_Result_27_1_fu_1029_p4) & p_Result_25_1_fu_1019_p4) & p_Result_3_fu_1009_p4) & p_Result_2_fu_999_p4);
    iqout_TDATA <= ap_phi_mux_iqtmpdat_phi_fu_451_p4;

    iqout_TDATA_blk_n_assign_proc : process(iqout_TREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iqout_TDATA_blk_n <= iqout_TREADY;
        else 
            iqout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iqout_TKEEP <= ap_const_lv64_0;
    iqout_TLAST <= set_last_reg_1427;
    iqout_TSTRB <= ap_const_lv64_0;
    iqout_TUSER <= iqtmp_user_V_reg_1439;

    iqout_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iqout_TVALID <= ap_const_logic_1;
        else 
            iqout_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    iqtmp_user_V_fu_537_p1 <= p_Val2_s_fu_348(8 - 1 downto 0);
    last_counter_V_4_fu_504_p2 <= std_logic_vector(unsigned(last_counter_V_fu_352) + unsigned(ap_const_lv15_7FFF));
    last_counter_V_5_fu_510_p3 <= 
        replay_length when (icmp_ln1049_fu_498_p2(0) = '1') else 
        last_counter_V_4_fu_504_p2;
    p_Result_19_10_fu_800_p4 <= comb2wide_V_q0(191 downto 176);
    p_Result_19_11_fu_820_p4 <= comb2wide_V_q0(207 downto 192);
    p_Result_19_12_fu_840_p4 <= comb2wide_V_q0(223 downto 208);
    p_Result_19_13_fu_860_p4 <= comb2wide_V_q0(239 downto 224);
    p_Result_19_14_fu_880_p4 <= comb2wide_V_q0(255 downto 240);
    p_Result_19_1_fu_600_p4 <= comb2wide_V_q0(31 downto 16);
    p_Result_19_2_fu_620_p4 <= comb2wide_V_q0(47 downto 32);
    p_Result_19_3_fu_640_p4 <= comb2wide_V_q0(63 downto 48);
    p_Result_19_4_fu_660_p4 <= comb2wide_V_q0(79 downto 64);
    p_Result_19_5_fu_680_p4 <= comb2wide_V_q0(95 downto 80);
    p_Result_19_6_fu_700_p4 <= comb2wide_V_q0(111 downto 96);
    p_Result_19_7_fu_720_p4 <= comb2wide_V_q0(127 downto 112);
    p_Result_19_8_fu_740_p4 <= comb2wide_V_q0(143 downto 128);
    p_Result_19_9_fu_760_p4 <= comb2wide_V_q0(159 downto 144);
    p_Result_19_s_fu_780_p4 <= comb2wide_V_q0(175 downto 160);
    p_Result_1_fu_590_p4 <= comb2wide_V_q0(271 downto 256);
    p_Result_21_10_fu_810_p4 <= comb2wide_V_q0(447 downto 432);
    p_Result_21_11_fu_830_p4 <= comb2wide_V_q0(463 downto 448);
    p_Result_21_12_fu_850_p4 <= comb2wide_V_q0(479 downto 464);
    p_Result_21_13_fu_870_p4 <= comb2wide_V_q0(495 downto 480);
    p_Result_21_14_fu_890_p4 <= comb2wide_V_q0(511 downto 496);
    p_Result_21_1_fu_610_p4 <= comb2wide_V_q0(287 downto 272);
    p_Result_21_2_fu_630_p4 <= comb2wide_V_q0(303 downto 288);
    p_Result_21_3_fu_650_p4 <= comb2wide_V_q0(319 downto 304);
    p_Result_21_4_fu_670_p4 <= comb2wide_V_q0(335 downto 320);
    p_Result_21_5_fu_690_p4 <= comb2wide_V_q0(351 downto 336);
    p_Result_21_6_fu_710_p4 <= comb2wide_V_q0(367 downto 352);
    p_Result_21_7_fu_730_p4 <= comb2wide_V_q0(383 downto 368);
    p_Result_21_8_fu_750_p4 <= comb2wide_V_q0(399 downto 384);
    p_Result_21_9_fu_770_p4 <= comb2wide_V_q0(415 downto 400);
    p_Result_21_s_fu_790_p4 <= comb2wide_V_q0(431 downto 416);
    p_Result_25_10_fu_1219_p4 <= p_Val2_1_fu_356(703 downto 688);
    p_Result_25_11_fu_1239_p4 <= p_Val2_1_fu_356(719 downto 704);
    p_Result_25_12_fu_1259_p4 <= p_Val2_1_fu_356(735 downto 720);
    p_Result_25_13_fu_1279_p4 <= p_Val2_1_fu_356(751 downto 736);
    p_Result_25_14_fu_1299_p4 <= p_Val2_1_fu_356(767 downto 752);
    p_Result_25_1_fu_1019_p4 <= p_Val2_1_fu_356(543 downto 528);
    p_Result_25_2_fu_1039_p4 <= p_Val2_1_fu_356(559 downto 544);
    p_Result_25_3_fu_1059_p4 <= p_Val2_1_fu_356(575 downto 560);
    p_Result_25_4_fu_1079_p4 <= p_Val2_1_fu_356(591 downto 576);
    p_Result_25_5_fu_1099_p4 <= p_Val2_1_fu_356(607 downto 592);
    p_Result_25_6_fu_1119_p4 <= p_Val2_1_fu_356(623 downto 608);
    p_Result_25_7_fu_1139_p4 <= p_Val2_1_fu_356(639 downto 624);
    p_Result_25_8_fu_1159_p4 <= p_Val2_1_fu_356(655 downto 640);
    p_Result_25_9_fu_1179_p4 <= p_Val2_1_fu_356(671 downto 656);
    p_Result_25_s_fu_1199_p4 <= p_Val2_1_fu_356(687 downto 672);
    p_Result_27_10_fu_1229_p4 <= p_Val2_1_fu_356(959 downto 944);
    p_Result_27_11_fu_1249_p4 <= p_Val2_1_fu_356(975 downto 960);
    p_Result_27_12_fu_1269_p4 <= p_Val2_1_fu_356(991 downto 976);
    p_Result_27_13_fu_1289_p4 <= p_Val2_1_fu_356(1007 downto 992);
    p_Result_27_14_fu_1309_p4 <= p_Val2_1_fu_356(1023 downto 1008);
    p_Result_27_1_fu_1029_p4 <= p_Val2_1_fu_356(799 downto 784);
    p_Result_27_2_fu_1049_p4 <= p_Val2_1_fu_356(815 downto 800);
    p_Result_27_3_fu_1069_p4 <= p_Val2_1_fu_356(831 downto 816);
    p_Result_27_4_fu_1089_p4 <= p_Val2_1_fu_356(847 downto 832);
    p_Result_27_5_fu_1109_p4 <= p_Val2_1_fu_356(863 downto 848);
    p_Result_27_6_fu_1129_p4 <= p_Val2_1_fu_356(879 downto 864);
    p_Result_27_7_fu_1149_p4 <= p_Val2_1_fu_356(895 downto 880);
    p_Result_27_8_fu_1169_p4 <= p_Val2_1_fu_356(911 downto 896);
    p_Result_27_9_fu_1189_p4 <= p_Val2_1_fu_356(927 downto 912);
    p_Result_27_s_fu_1209_p4 <= p_Val2_1_fu_356(943 downto 928);
    p_Result_2_fu_999_p4 <= p_Val2_1_fu_356(527 downto 512);
    p_Result_3_fu_1009_p4 <= p_Val2_1_fu_356(783 downto 768);
    qout_TDATA <= ap_phi_mux_qtmpdat_phi_fu_461_p4;

    qout_TDATA_blk_n_assign_proc : process(qout_TREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            qout_TDATA_blk_n <= qout_TREADY;
        else 
            qout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    qout_TKEEP <= ap_const_lv32_0;
    qout_TLAST <= set_last_reg_1427;
    qout_TSTRB <= ap_const_lv32_0;

    qout_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            qout_TVALID <= ap_const_logic_1;
        else 
            qout_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    ret_fu_522_p4 <= p_Val2_s_fu_348(14 downto 1);
    sample_V_fu_552_p3 <= 
        ap_const_lv15_0 when (icmp_ln1049_1_fu_541_p2(0) = '1') else 
        add_ln223_fu_546_p2;
    set_last_fu_517_p2 <= (tlast and icmp_ln1049_fu_498_p2);
    trunc_ln674_fu_586_p1 <= comb2wide_V_q0(16 - 1 downto 0);
    zext_ln573_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_fu_522_p4),64));
end behav;
