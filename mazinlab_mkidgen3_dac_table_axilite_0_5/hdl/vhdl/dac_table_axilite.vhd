-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dac_table_axilite is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 21;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    iout_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    iout_TVALID : OUT STD_LOGIC;
    iout_TREADY : IN STD_LOGIC;
    iout_TLAST : OUT STD_LOGIC;
    qout_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    qout_TVALID : OUT STD_LOGIC;
    qout_TREADY : IN STD_LOGIC;
    qout_TLAST : OUT STD_LOGIC;
    iqout_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    iqout_TVALID : OUT STD_LOGIC;
    iqout_TREADY : IN STD_LOGIC;
    iqout_TLAST : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of dac_table_axilite is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dac_table_axilite,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.364875,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=512,HLS_SYN_DSP=0,HLS_SYN_FF=1473,HLS_SYN_LUT=1472,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal comb_0_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_0_0_ce0 : STD_LOGIC;
    signal comb_0_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_0_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_0_1_ce0 : STD_LOGIC;
    signal comb_0_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_1_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_1_0_ce0 : STD_LOGIC;
    signal comb_1_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_1_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_1_1_ce0 : STD_LOGIC;
    signal comb_1_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_2_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_2_0_ce0 : STD_LOGIC;
    signal comb_2_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_2_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_2_1_ce0 : STD_LOGIC;
    signal comb_2_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_3_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_3_0_ce0 : STD_LOGIC;
    signal comb_3_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_3_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_3_1_ce0 : STD_LOGIC;
    signal comb_3_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_4_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_4_0_ce0 : STD_LOGIC;
    signal comb_4_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_4_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_4_1_ce0 : STD_LOGIC;
    signal comb_4_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_5_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_5_0_ce0 : STD_LOGIC;
    signal comb_5_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_5_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_5_1_ce0 : STD_LOGIC;
    signal comb_5_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_6_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_6_0_ce0 : STD_LOGIC;
    signal comb_6_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_6_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_6_1_ce0 : STD_LOGIC;
    signal comb_6_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_7_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_7_0_ce0 : STD_LOGIC;
    signal comb_7_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal comb_7_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal comb_7_1_ce0 : STD_LOGIC;
    signal comb_7_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal length_V : STD_LOGIC_VECTOR (14 downto 0);
    signal tlast : STD_LOGIC;
    signal replay_length_V : STD_LOGIC_VECTOR (14 downto 0);
    signal run : STD_LOGIC;
    signal iout_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal run_read_reg_604 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal run_read_reg_604_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal qout_TDATA_blk_n : STD_LOGIC;
    signal iqout_TDATA_blk_n : STD_LOGIC;
    signal t_V_1_reg_406 : STD_LOGIC_VECTOR (14 downto 0);
    signal t_V_reg_417 : STD_LOGIC_VECTOR (14 downto 0);
    signal replay_length_V_read_reg_578 : STD_LOGIC_VECTOR (14 downto 0);
    signal tlast_read_reg_583 : STD_LOGIC_VECTOR (0 downto 0);
    signal length_V_read_reg_588 : STD_LOGIC_VECTOR (14 downto 0);
    signal last_counter_V_3_fu_426_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal last_counter_V_3_reg_593 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bar_V_fu_431_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal bar_V_reg_599 : STD_LOGIC_VECTOR (14 downto 0);
    signal run_read_read_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal last_counter_V_2_fu_448_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_last_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal sample_V_1_fu_491_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal zext_ln544_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln879_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_counter_V_fu_442_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln879_1_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sample_V_fu_485_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal regslice_both_iout_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_qout_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_iqout_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state6 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal iout_TDATA_int : STD_LOGIC_VECTOR (127 downto 0);
    signal iout_TVALID_int : STD_LOGIC;
    signal iout_TREADY_int : STD_LOGIC;
    signal regslice_both_iout_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_iout_V_last_U_apdone_blk : STD_LOGIC;
    signal iout_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_iout_V_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_iout_V_last_U_vld_out : STD_LOGIC;
    signal qout_TDATA_int : STD_LOGIC_VECTOR (127 downto 0);
    signal qout_TVALID_int : STD_LOGIC;
    signal qout_TREADY_int : STD_LOGIC;
    signal regslice_both_qout_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_qout_V_last_U_apdone_blk : STD_LOGIC;
    signal qout_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_qout_V_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_qout_V_last_U_vld_out : STD_LOGIC;
    signal iqout_TDATA_int : STD_LOGIC_VECTOR (255 downto 0);
    signal iqout_TVALID_int : STD_LOGIC;
    signal iqout_TREADY_int : STD_LOGIC;
    signal regslice_both_iqout_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_iqout_V_last_U_apdone_blk : STD_LOGIC;
    signal iqout_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_iqout_V_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_iqout_V_last_U_vld_out : STD_LOGIC;

    component dac_table_axilite_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        comb_0_0_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_0_0_ce0 : IN STD_LOGIC;
        comb_0_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_0_1_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_0_1_ce0 : IN STD_LOGIC;
        comb_0_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_1_0_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_1_0_ce0 : IN STD_LOGIC;
        comb_1_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_1_1_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_1_1_ce0 : IN STD_LOGIC;
        comb_1_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_2_0_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_2_0_ce0 : IN STD_LOGIC;
        comb_2_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_2_1_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_2_1_ce0 : IN STD_LOGIC;
        comb_2_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_3_0_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_3_0_ce0 : IN STD_LOGIC;
        comb_3_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_3_1_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_3_1_ce0 : IN STD_LOGIC;
        comb_3_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_4_0_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_4_0_ce0 : IN STD_LOGIC;
        comb_4_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_4_1_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_4_1_ce0 : IN STD_LOGIC;
        comb_4_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_5_0_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_5_0_ce0 : IN STD_LOGIC;
        comb_5_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_5_1_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_5_1_ce0 : IN STD_LOGIC;
        comb_5_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_6_0_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_6_0_ce0 : IN STD_LOGIC;
        comb_6_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_6_1_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_6_1_ce0 : IN STD_LOGIC;
        comb_6_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_7_0_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_7_0_ce0 : IN STD_LOGIC;
        comb_7_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        comb_7_1_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        comb_7_1_ce0 : IN STD_LOGIC;
        comb_7_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        length_V : OUT STD_LOGIC_VECTOR (14 downto 0);
        tlast : OUT STD_LOGIC;
        replay_length_V : OUT STD_LOGIC_VECTOR (14 downto 0);
        run : OUT STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    dac_table_axilite_control_s_axi_U : component dac_table_axilite_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        comb_0_0_address0 => comb_0_0_address0,
        comb_0_0_ce0 => comb_0_0_ce0,
        comb_0_0_q0 => comb_0_0_q0,
        comb_0_1_address0 => comb_0_1_address0,
        comb_0_1_ce0 => comb_0_1_ce0,
        comb_0_1_q0 => comb_0_1_q0,
        comb_1_0_address0 => comb_1_0_address0,
        comb_1_0_ce0 => comb_1_0_ce0,
        comb_1_0_q0 => comb_1_0_q0,
        comb_1_1_address0 => comb_1_1_address0,
        comb_1_1_ce0 => comb_1_1_ce0,
        comb_1_1_q0 => comb_1_1_q0,
        comb_2_0_address0 => comb_2_0_address0,
        comb_2_0_ce0 => comb_2_0_ce0,
        comb_2_0_q0 => comb_2_0_q0,
        comb_2_1_address0 => comb_2_1_address0,
        comb_2_1_ce0 => comb_2_1_ce0,
        comb_2_1_q0 => comb_2_1_q0,
        comb_3_0_address0 => comb_3_0_address0,
        comb_3_0_ce0 => comb_3_0_ce0,
        comb_3_0_q0 => comb_3_0_q0,
        comb_3_1_address0 => comb_3_1_address0,
        comb_3_1_ce0 => comb_3_1_ce0,
        comb_3_1_q0 => comb_3_1_q0,
        comb_4_0_address0 => comb_4_0_address0,
        comb_4_0_ce0 => comb_4_0_ce0,
        comb_4_0_q0 => comb_4_0_q0,
        comb_4_1_address0 => comb_4_1_address0,
        comb_4_1_ce0 => comb_4_1_ce0,
        comb_4_1_q0 => comb_4_1_q0,
        comb_5_0_address0 => comb_5_0_address0,
        comb_5_0_ce0 => comb_5_0_ce0,
        comb_5_0_q0 => comb_5_0_q0,
        comb_5_1_address0 => comb_5_1_address0,
        comb_5_1_ce0 => comb_5_1_ce0,
        comb_5_1_q0 => comb_5_1_q0,
        comb_6_0_address0 => comb_6_0_address0,
        comb_6_0_ce0 => comb_6_0_ce0,
        comb_6_0_q0 => comb_6_0_q0,
        comb_6_1_address0 => comb_6_1_address0,
        comb_6_1_ce0 => comb_6_1_ce0,
        comb_6_1_q0 => comb_6_1_q0,
        comb_7_0_address0 => comb_7_0_address0,
        comb_7_0_ce0 => comb_7_0_ce0,
        comb_7_0_q0 => comb_7_0_q0,
        comb_7_1_address0 => comb_7_1_address0,
        comb_7_1_ce0 => comb_7_1_ce0,
        comb_7_1_q0 => comb_7_1_q0,
        length_V => length_V,
        tlast => tlast,
        replay_length_V => replay_length_V,
        run => run);

    regslice_both_iout_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iout_TDATA_int,
        vld_in => iout_TVALID_int,
        ack_in => iout_TREADY_int,
        data_out => iout_TDATA,
        vld_out => regslice_both_iout_V_data_V_U_vld_out,
        ack_out => iout_TREADY,
        apdone_blk => regslice_both_iout_V_data_V_U_apdone_blk);

    regslice_both_w1_iout_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iout_TLAST_int,
        vld_in => iout_TVALID_int,
        ack_in => regslice_both_w1_iout_V_last_U_ack_in_dummy,
        data_out => iout_TLAST,
        vld_out => regslice_both_w1_iout_V_last_U_vld_out,
        ack_out => iout_TREADY,
        apdone_blk => regslice_both_w1_iout_V_last_U_apdone_blk);

    regslice_both_qout_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => qout_TDATA_int,
        vld_in => qout_TVALID_int,
        ack_in => qout_TREADY_int,
        data_out => qout_TDATA,
        vld_out => regslice_both_qout_V_data_V_U_vld_out,
        ack_out => qout_TREADY,
        apdone_blk => regslice_both_qout_V_data_V_U_apdone_blk);

    regslice_both_w1_qout_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => qout_TLAST_int,
        vld_in => qout_TVALID_int,
        ack_in => regslice_both_w1_qout_V_last_U_ack_in_dummy,
        data_out => qout_TLAST,
        vld_out => regslice_both_w1_qout_V_last_U_vld_out,
        ack_out => qout_TREADY,
        apdone_blk => regslice_both_w1_qout_V_last_U_apdone_blk);

    regslice_both_iqout_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iqout_TDATA_int,
        vld_in => iqout_TVALID_int,
        ack_in => iqout_TREADY_int,
        data_out => iqout_TDATA,
        vld_out => regslice_both_iqout_V_data_V_U_vld_out,
        ack_out => iqout_TREADY,
        apdone_blk => regslice_both_iqout_V_data_V_U_apdone_blk);

    regslice_both_w1_iqout_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iqout_TLAST_int,
        vld_in => iqout_TVALID_int,
        ack_in => regslice_both_w1_iqout_V_last_U_ack_in_dummy,
        data_out => iqout_TLAST,
        vld_out => regslice_both_w1_iqout_V_last_U_vld_out,
        ack_out => iqout_TREADY,
        apdone_blk => regslice_both_w1_iqout_V_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_1_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (run_read_read_fu_162_p2 = ap_const_lv1_1))) then 
                t_V_1_reg_406 <= sample_V_1_fu_491_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                t_V_1_reg_406 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    t_V_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (run_read_read_fu_162_p2 = ap_const_lv1_1))) then 
                t_V_reg_417 <= last_counter_V_2_fu_448_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                t_V_reg_417 <= last_counter_V_3_fu_426_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bar_V_reg_599 <= bar_V_fu_431_p2;
                last_counter_V_3_reg_593 <= last_counter_V_3_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                length_V_read_reg_588 <= length_V;
                replay_length_V_read_reg_578 <= replay_length_V;
                tlast_read_reg_583 <= (0=>tlast, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                run_read_reg_604 <= (0=>run, others=>'-');
                run_read_reg_604_pp0_iter1_reg <= run_read_reg_604;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (run_read_read_fu_162_p2 = ap_const_lv1_1))) then
                tmp_last_reg_613 <= tmp_last_fu_455_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, run_read_read_fu_162_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state6, regslice_both_iout_V_data_V_U_apdone_blk, regslice_both_qout_V_data_V_U_apdone_blk, regslice_both_iqout_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (run_read_read_fu_162_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (run_read_read_fu_162_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((regslice_both_iqout_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_qout_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_iout_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(run_read_reg_604, iout_TREADY_int, qout_TREADY_int, iqout_TREADY_int)
    begin
                ap_block_state4_io <= (((iqout_TREADY_int = ap_const_logic_0) and (run_read_reg_604 = ap_const_lv1_1)) or ((qout_TREADY_int = ap_const_logic_0) and (run_read_reg_604 = ap_const_lv1_1)) or ((iout_TREADY_int = ap_const_logic_0) and (run_read_reg_604 = ap_const_lv1_1)));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(run_read_reg_604_pp0_iter1_reg, iout_TREADY_int, qout_TREADY_int, iqout_TREADY_int)
    begin
                ap_block_state5_io <= (((iqout_TREADY_int = ap_const_logic_0) and (run_read_reg_604_pp0_iter1_reg = ap_const_lv1_1)) or ((qout_TREADY_int = ap_const_logic_0) and (run_read_reg_604_pp0_iter1_reg = ap_const_lv1_1)) or ((iout_TREADY_int = ap_const_logic_0) and (run_read_reg_604_pp0_iter1_reg = ap_const_lv1_1)));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_assign_proc : process(regslice_both_iout_V_data_V_U_apdone_blk, regslice_both_qout_V_data_V_U_apdone_blk, regslice_both_iqout_V_data_V_U_apdone_blk)
    begin
                ap_block_state6 <= ((regslice_both_iqout_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_qout_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_iout_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(run_read_read_fu_162_p2)
    begin
        if ((run_read_read_fu_162_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6, regslice_both_iout_V_data_V_U_apdone_blk, regslice_both_qout_V_data_V_U_apdone_blk, regslice_both_iqout_V_data_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_iqout_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_qout_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_iout_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, regslice_both_iout_V_data_V_U_apdone_blk, regslice_both_qout_V_data_V_U_apdone_blk, regslice_both_iqout_V_data_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_iqout_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_qout_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_iout_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bar_V_fu_431_p2 <= std_logic_vector(unsigned(length_V_read_reg_588) + unsigned(ap_const_lv15_7FFF));
    comb_0_0_address0 <= zext_ln544_fu_460_p1(15 - 1 downto 0);

    comb_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb_0_0_ce0 <= ap_const_logic_1;
        else 
            comb_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_0_1_address0 <= zext_ln544_fu_460_p1(15 - 1 downto 0);

    comb_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb_0_1_ce0 <= ap_const_logic_1;
        else 
            comb_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_1_0_address0 <= zext_ln544_fu_460_p1(15 - 1 downto 0);

    comb_1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb_1_0_ce0 <= ap_const_logic_1;
        else 
            comb_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_1_1_address0 <= zext_ln544_fu_460_p1(15 - 1 downto 0);

    comb_1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb_1_1_ce0 <= ap_const_logic_1;
        else 
            comb_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_2_0_address0 <= zext_ln544_fu_460_p1(15 - 1 downto 0);

    comb_2_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb_2_0_ce0 <= ap_const_logic_1;
        else 
            comb_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_2_1_address0 <= zext_ln544_fu_460_p1(15 - 1 downto 0);

    comb_2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb_2_1_ce0 <= ap_const_logic_1;
        else 
            comb_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_3_0_address0 <= zext_ln544_fu_460_p1(15 - 1 downto 0);

    comb_3_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb_3_0_ce0 <= ap_const_logic_1;
        else 
            comb_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_3_1_address0 <= zext_ln544_fu_460_p1(15 - 1 downto 0);

    comb_3_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb_3_1_ce0 <= ap_const_logic_1;
        else 
            comb_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_4_0_address0 <= zext_ln544_fu_460_p1(15 - 1 downto 0);

    comb_4_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb_4_0_ce0 <= ap_const_logic_1;
        else 
            comb_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_4_1_address0 <= zext_ln544_fu_460_p1(15 - 1 downto 0);

    comb_4_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb_4_1_ce0 <= ap_const_logic_1;
        else 
            comb_4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_5_0_address0 <= zext_ln544_fu_460_p1(15 - 1 downto 0);

    comb_5_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb_5_0_ce0 <= ap_const_logic_1;
        else 
            comb_5_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_5_1_address0 <= zext_ln544_fu_460_p1(15 - 1 downto 0);

    comb_5_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb_5_1_ce0 <= ap_const_logic_1;
        else 
            comb_5_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_6_0_address0 <= zext_ln544_fu_460_p1(15 - 1 downto 0);

    comb_6_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb_6_0_ce0 <= ap_const_logic_1;
        else 
            comb_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_6_1_address0 <= zext_ln544_fu_460_p1(15 - 1 downto 0);

    comb_6_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb_6_1_ce0 <= ap_const_logic_1;
        else 
            comb_6_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_7_0_address0 <= zext_ln544_fu_460_p1(15 - 1 downto 0);

    comb_7_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb_7_0_ce0 <= ap_const_logic_1;
        else 
            comb_7_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    comb_7_1_address0 <= zext_ln544_fu_460_p1(15 - 1 downto 0);

    comb_7_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            comb_7_1_ce0 <= ap_const_logic_1;
        else 
            comb_7_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln879_1_fu_480_p2 <= "1" when (t_V_1_reg_406 = bar_V_reg_599) else "0";
    icmp_ln879_fu_436_p2 <= "1" when (t_V_reg_417 = ap_const_lv15_0) else "0";

    iout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, run_read_reg_604, ap_enable_reg_pp0_iter2, run_read_reg_604_pp0_iter1_reg, iout_TREADY_int)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (run_read_reg_604_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (run_read_reg_604 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            iout_TDATA_blk_n <= iout_TREADY_int;
        else 
            iout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iout_TDATA_int <= (((((((comb_7_0_q0 & comb_6_0_q0) & comb_5_0_q0) & comb_4_0_q0) & comb_3_0_q0) & comb_2_0_q0) & comb_1_0_q0) & comb_0_0_q0);
    iout_TLAST_int <= tmp_last_reg_613(0);
    iout_TVALID <= regslice_both_iout_V_data_V_U_vld_out;

    iout_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, run_read_reg_604, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (run_read_reg_604 = ap_const_lv1_1))) then 
            iout_TVALID_int <= ap_const_logic_1;
        else 
            iout_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    iqout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, run_read_reg_604, ap_enable_reg_pp0_iter2, run_read_reg_604_pp0_iter1_reg, iqout_TREADY_int)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (run_read_reg_604_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (run_read_reg_604 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            iqout_TDATA_blk_n <= iqout_TREADY_int;
        else 
            iqout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iqout_TDATA_int <= (((((((((((((((comb_7_1_q0 & comb_7_0_q0) & comb_6_1_q0) & comb_6_0_q0) & comb_5_1_q0) & comb_5_0_q0) & comb_4_1_q0) & comb_4_0_q0) & comb_3_1_q0) & comb_3_0_q0) & comb_2_1_q0) & comb_2_0_q0) & comb_1_1_q0) & comb_1_0_q0) & comb_0_1_q0) & comb_0_0_q0);
    iqout_TLAST_int <= tmp_last_reg_613(0);
    iqout_TVALID <= regslice_both_iqout_V_data_V_U_vld_out;

    iqout_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, run_read_reg_604, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (run_read_reg_604 = ap_const_lv1_1))) then 
            iqout_TVALID_int <= ap_const_logic_1;
        else 
            iqout_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    last_counter_V_2_fu_448_p3 <= 
        last_counter_V_3_reg_593 when (icmp_ln879_fu_436_p2(0) = '1') else 
        last_counter_V_fu_442_p2;
    last_counter_V_3_fu_426_p2 <= std_logic_vector(unsigned(replay_length_V_read_reg_578) + unsigned(ap_const_lv15_7FFF));
    last_counter_V_fu_442_p2 <= std_logic_vector(unsigned(t_V_reg_417) + unsigned(ap_const_lv15_7FFF));

    qout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, run_read_reg_604, ap_enable_reg_pp0_iter2, run_read_reg_604_pp0_iter1_reg, qout_TREADY_int)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (run_read_reg_604_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (run_read_reg_604 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            qout_TDATA_blk_n <= qout_TREADY_int;
        else 
            qout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    qout_TDATA_int <= (((((((comb_7_1_q0 & comb_6_1_q0) & comb_5_1_q0) & comb_4_1_q0) & comb_3_1_q0) & comb_2_1_q0) & comb_1_1_q0) & comb_0_1_q0);
    qout_TLAST_int <= tmp_last_reg_613(0);
    qout_TVALID <= regslice_both_qout_V_data_V_U_vld_out;

    qout_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, run_read_reg_604, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (run_read_reg_604 = ap_const_lv1_1))) then 
            qout_TVALID_int <= ap_const_logic_1;
        else 
            qout_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    run_read_read_fu_162_p2 <= (0=>run, others=>'-');
    sample_V_1_fu_491_p3 <= 
        ap_const_lv15_0 when (icmp_ln879_1_fu_480_p2(0) = '1') else 
        sample_V_fu_485_p2;
    sample_V_fu_485_p2 <= std_logic_vector(unsigned(t_V_1_reg_406) + unsigned(ap_const_lv15_1));
    tmp_last_fu_455_p2 <= (tlast_read_reg_583 and icmp_ln879_fu_436_p2);
    zext_ln544_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_1_reg_406),64));
end behav;
