// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dac_table_axilite,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.364875,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=512,HLS_SYN_DSP=0,HLS_SYN_FF=1473,HLS_SYN_LUT=1472,HLS_VERSION=2019_2_1}" *)

module dac_table_axilite (
        ap_clk,
        ap_rst_n,
        iout_TDATA,
        iout_TVALID,
        iout_TREADY,
        iout_TLAST,
        qout_TDATA,
        qout_TVALID,
        qout_TREADY,
        qout_TLAST,
        iqout_TDATA,
        iqout_TVALID,
        iqout_TREADY,
        iqout_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 21;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [127:0] iout_TDATA;
output   iout_TVALID;
input   iout_TREADY;
output   iout_TLAST;
output  [127:0] qout_TDATA;
output   qout_TVALID;
input   qout_TREADY;
output   qout_TLAST;
output  [255:0] iqout_TDATA;
output   iqout_TVALID;
input   iqout_TREADY;
output   iqout_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [14:0] comb_0_0_address0;
reg    comb_0_0_ce0;
wire   [15:0] comb_0_0_q0;
wire   [14:0] comb_0_1_address0;
reg    comb_0_1_ce0;
wire   [15:0] comb_0_1_q0;
wire   [14:0] comb_1_0_address0;
reg    comb_1_0_ce0;
wire   [15:0] comb_1_0_q0;
wire   [14:0] comb_1_1_address0;
reg    comb_1_1_ce0;
wire   [15:0] comb_1_1_q0;
wire   [14:0] comb_2_0_address0;
reg    comb_2_0_ce0;
wire   [15:0] comb_2_0_q0;
wire   [14:0] comb_2_1_address0;
reg    comb_2_1_ce0;
wire   [15:0] comb_2_1_q0;
wire   [14:0] comb_3_0_address0;
reg    comb_3_0_ce0;
wire   [15:0] comb_3_0_q0;
wire   [14:0] comb_3_1_address0;
reg    comb_3_1_ce0;
wire   [15:0] comb_3_1_q0;
wire   [14:0] comb_4_0_address0;
reg    comb_4_0_ce0;
wire   [15:0] comb_4_0_q0;
wire   [14:0] comb_4_1_address0;
reg    comb_4_1_ce0;
wire   [15:0] comb_4_1_q0;
wire   [14:0] comb_5_0_address0;
reg    comb_5_0_ce0;
wire   [15:0] comb_5_0_q0;
wire   [14:0] comb_5_1_address0;
reg    comb_5_1_ce0;
wire   [15:0] comb_5_1_q0;
wire   [14:0] comb_6_0_address0;
reg    comb_6_0_ce0;
wire   [15:0] comb_6_0_q0;
wire   [14:0] comb_6_1_address0;
reg    comb_6_1_ce0;
wire   [15:0] comb_6_1_q0;
wire   [14:0] comb_7_0_address0;
reg    comb_7_0_ce0;
wire   [15:0] comb_7_0_q0;
wire   [14:0] comb_7_1_address0;
reg    comb_7_1_ce0;
wire   [15:0] comb_7_1_q0;
wire   [14:0] length_V;
wire    tlast;
wire   [14:0] replay_length_V;
wire    run;
reg    iout_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] run_read_reg_604;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] run_read_reg_604_pp0_iter1_reg;
reg    qout_TDATA_blk_n;
reg    iqout_TDATA_blk_n;
reg   [14:0] t_V_1_reg_406;
reg   [14:0] t_V_reg_417;
reg   [14:0] replay_length_V_read_reg_578;
reg   [0:0] tlast_read_reg_583;
reg   [14:0] length_V_read_reg_588;
wire   [14:0] last_counter_V_3_fu_426_p2;
reg   [14:0] last_counter_V_3_reg_593;
wire    ap_CS_fsm_state2;
wire   [14:0] bar_V_fu_431_p2;
reg   [14:0] bar_V_reg_599;
wire   [0:0] run_read_read_fu_162_p2;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [14:0] last_counter_V_2_fu_448_p3;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_fu_455_p2;
reg   [0:0] tmp_last_reg_613;
wire   [14:0] sample_V_1_fu_491_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire   [63:0] zext_ln544_fu_460_p1;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln879_fu_436_p2;
wire   [14:0] last_counter_V_fu_442_p2;
wire   [0:0] icmp_ln879_1_fu_480_p2;
wire   [14:0] sample_V_fu_485_p2;
wire    ap_CS_fsm_state6;
wire    regslice_both_iout_V_data_V_U_apdone_blk;
wire    regslice_both_qout_V_data_V_U_apdone_blk;
wire    regslice_both_iqout_V_data_V_U_apdone_blk;
reg    ap_block_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [127:0] iout_TDATA_int;
reg    iout_TVALID_int;
wire    iout_TREADY_int;
wire    regslice_both_iout_V_data_V_U_vld_out;
wire    regslice_both_w1_iout_V_last_U_apdone_blk;
wire    iout_TLAST_int;
wire    regslice_both_w1_iout_V_last_U_ack_in_dummy;
wire    regslice_both_w1_iout_V_last_U_vld_out;
wire   [127:0] qout_TDATA_int;
reg    qout_TVALID_int;
wire    qout_TREADY_int;
wire    regslice_both_qout_V_data_V_U_vld_out;
wire    regslice_both_w1_qout_V_last_U_apdone_blk;
wire    qout_TLAST_int;
wire    regslice_both_w1_qout_V_last_U_ack_in_dummy;
wire    regslice_both_w1_qout_V_last_U_vld_out;
wire   [255:0] iqout_TDATA_int;
reg    iqout_TVALID_int;
wire    iqout_TREADY_int;
wire    regslice_both_iqout_V_data_V_U_vld_out;
wire    regslice_both_w1_iqout_V_last_U_apdone_blk;
wire    iqout_TLAST_int;
wire    regslice_both_w1_iqout_V_last_U_ack_in_dummy;
wire    regslice_both_w1_iqout_V_last_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

dac_table_axilite_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
dac_table_axilite_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .comb_0_0_address0(comb_0_0_address0),
    .comb_0_0_ce0(comb_0_0_ce0),
    .comb_0_0_q0(comb_0_0_q0),
    .comb_0_1_address0(comb_0_1_address0),
    .comb_0_1_ce0(comb_0_1_ce0),
    .comb_0_1_q0(comb_0_1_q0),
    .comb_1_0_address0(comb_1_0_address0),
    .comb_1_0_ce0(comb_1_0_ce0),
    .comb_1_0_q0(comb_1_0_q0),
    .comb_1_1_address0(comb_1_1_address0),
    .comb_1_1_ce0(comb_1_1_ce0),
    .comb_1_1_q0(comb_1_1_q0),
    .comb_2_0_address0(comb_2_0_address0),
    .comb_2_0_ce0(comb_2_0_ce0),
    .comb_2_0_q0(comb_2_0_q0),
    .comb_2_1_address0(comb_2_1_address0),
    .comb_2_1_ce0(comb_2_1_ce0),
    .comb_2_1_q0(comb_2_1_q0),
    .comb_3_0_address0(comb_3_0_address0),
    .comb_3_0_ce0(comb_3_0_ce0),
    .comb_3_0_q0(comb_3_0_q0),
    .comb_3_1_address0(comb_3_1_address0),
    .comb_3_1_ce0(comb_3_1_ce0),
    .comb_3_1_q0(comb_3_1_q0),
    .comb_4_0_address0(comb_4_0_address0),
    .comb_4_0_ce0(comb_4_0_ce0),
    .comb_4_0_q0(comb_4_0_q0),
    .comb_4_1_address0(comb_4_1_address0),
    .comb_4_1_ce0(comb_4_1_ce0),
    .comb_4_1_q0(comb_4_1_q0),
    .comb_5_0_address0(comb_5_0_address0),
    .comb_5_0_ce0(comb_5_0_ce0),
    .comb_5_0_q0(comb_5_0_q0),
    .comb_5_1_address0(comb_5_1_address0),
    .comb_5_1_ce0(comb_5_1_ce0),
    .comb_5_1_q0(comb_5_1_q0),
    .comb_6_0_address0(comb_6_0_address0),
    .comb_6_0_ce0(comb_6_0_ce0),
    .comb_6_0_q0(comb_6_0_q0),
    .comb_6_1_address0(comb_6_1_address0),
    .comb_6_1_ce0(comb_6_1_ce0),
    .comb_6_1_q0(comb_6_1_q0),
    .comb_7_0_address0(comb_7_0_address0),
    .comb_7_0_ce0(comb_7_0_ce0),
    .comb_7_0_q0(comb_7_0_q0),
    .comb_7_1_address0(comb_7_1_address0),
    .comb_7_1_ce0(comb_7_1_ce0),
    .comb_7_1_q0(comb_7_1_q0),
    .length_V(length_V),
    .tlast(tlast),
    .replay_length_V(replay_length_V),
    .run(run)
);

regslice_both #(
    .DataWidth( 128 ))
regslice_both_iout_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iout_TDATA_int),
    .vld_in(iout_TVALID_int),
    .ack_in(iout_TREADY_int),
    .data_out(iout_TDATA),
    .vld_out(regslice_both_iout_V_data_V_U_vld_out),
    .ack_out(iout_TREADY),
    .apdone_blk(regslice_both_iout_V_data_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_iout_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iout_TLAST_int),
    .vld_in(iout_TVALID_int),
    .ack_in(regslice_both_w1_iout_V_last_U_ack_in_dummy),
    .data_out(iout_TLAST),
    .vld_out(regslice_both_w1_iout_V_last_U_vld_out),
    .ack_out(iout_TREADY),
    .apdone_blk(regslice_both_w1_iout_V_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 128 ))
regslice_both_qout_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(qout_TDATA_int),
    .vld_in(qout_TVALID_int),
    .ack_in(qout_TREADY_int),
    .data_out(qout_TDATA),
    .vld_out(regslice_both_qout_V_data_V_U_vld_out),
    .ack_out(qout_TREADY),
    .apdone_blk(regslice_both_qout_V_data_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_qout_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(qout_TLAST_int),
    .vld_in(qout_TVALID_int),
    .ack_in(regslice_both_w1_qout_V_last_U_ack_in_dummy),
    .data_out(qout_TLAST),
    .vld_out(regslice_both_w1_qout_V_last_U_vld_out),
    .ack_out(qout_TREADY),
    .apdone_blk(regslice_both_w1_qout_V_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 256 ))
regslice_both_iqout_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iqout_TDATA_int),
    .vld_in(iqout_TVALID_int),
    .ack_in(iqout_TREADY_int),
    .data_out(iqout_TDATA),
    .vld_out(regslice_both_iqout_V_data_V_U_vld_out),
    .ack_out(iqout_TREADY),
    .apdone_blk(regslice_both_iqout_V_data_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_iqout_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iqout_TLAST_int),
    .vld_in(iqout_TVALID_int),
    .ack_in(regslice_both_w1_iqout_V_last_U_ack_in_dummy),
    .data_out(iqout_TLAST),
    .vld_out(regslice_both_w1_iqout_V_last_U_vld_out),
    .ack_out(iqout_TREADY),
    .apdone_blk(regslice_both_w1_iqout_V_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (run_read_read_fu_162_p2 == 1'd1))) begin
        t_V_1_reg_406 <= sample_V_1_fu_491_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_V_1_reg_406 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (run_read_read_fu_162_p2 == 1'd1))) begin
        t_V_reg_417 <= last_counter_V_2_fu_448_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_V_reg_417 <= last_counter_V_3_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bar_V_reg_599 <= bar_V_fu_431_p2;
        last_counter_V_3_reg_593 <= last_counter_V_3_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        length_V_read_reg_588 <= length_V;
        replay_length_V_read_reg_578 <= replay_length_V;
        tlast_read_reg_583 <= tlast;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        run_read_reg_604 <= run;
        run_read_reg_604_pp0_iter1_reg <= run_read_reg_604;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (run_read_read_fu_162_p2 == 1'd1))) begin
        tmp_last_reg_613 <= tmp_last_fu_455_p2;
    end
end

always @ (*) begin
    if ((run_read_read_fu_162_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_iqout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_qout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_iout_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_iqout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_qout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_iout_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comb_0_0_ce0 = 1'b1;
    end else begin
        comb_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comb_0_1_ce0 = 1'b1;
    end else begin
        comb_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comb_1_0_ce0 = 1'b1;
    end else begin
        comb_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comb_1_1_ce0 = 1'b1;
    end else begin
        comb_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comb_2_0_ce0 = 1'b1;
    end else begin
        comb_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comb_2_1_ce0 = 1'b1;
    end else begin
        comb_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comb_3_0_ce0 = 1'b1;
    end else begin
        comb_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comb_3_1_ce0 = 1'b1;
    end else begin
        comb_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comb_4_0_ce0 = 1'b1;
    end else begin
        comb_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comb_4_1_ce0 = 1'b1;
    end else begin
        comb_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comb_5_0_ce0 = 1'b1;
    end else begin
        comb_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comb_5_1_ce0 = 1'b1;
    end else begin
        comb_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comb_6_0_ce0 = 1'b1;
    end else begin
        comb_6_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comb_6_1_ce0 = 1'b1;
    end else begin
        comb_6_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comb_7_0_ce0 = 1'b1;
    end else begin
        comb_7_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comb_7_1_ce0 = 1'b1;
    end else begin
        comb_7_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (run_read_reg_604_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (run_read_reg_604 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        iout_TDATA_blk_n = iout_TREADY_int;
    end else begin
        iout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (run_read_reg_604 == 1'd1))) begin
        iout_TVALID_int = 1'b1;
    end else begin
        iout_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (run_read_reg_604_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (run_read_reg_604 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        iqout_TDATA_blk_n = iqout_TREADY_int;
    end else begin
        iqout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (run_read_reg_604 == 1'd1))) begin
        iqout_TVALID_int = 1'b1;
    end else begin
        iqout_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (run_read_reg_604_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (run_read_reg_604 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        qout_TDATA_blk_n = qout_TREADY_int;
    end else begin
        qout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (run_read_reg_604 == 1'd1))) begin
        qout_TVALID_int = 1'b1;
    end else begin
        qout_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (run_read_read_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (run_read_read_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((regslice_both_iqout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_qout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_iout_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = (((iqout_TREADY_int == 1'b0) & (run_read_reg_604 == 1'd1)) | ((qout_TREADY_int == 1'b0) & (run_read_reg_604 == 1'd1)) | ((iout_TREADY_int == 1'b0) & (run_read_reg_604 == 1'd1)));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = (((iqout_TREADY_int == 1'b0) & (run_read_reg_604_pp0_iter1_reg == 1'd1)) | ((qout_TREADY_int == 1'b0) & (run_read_reg_604_pp0_iter1_reg == 1'd1)) | ((iout_TREADY_int == 1'b0) & (run_read_reg_604_pp0_iter1_reg == 1'd1)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6 = ((regslice_both_iqout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_qout_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_iout_V_data_V_U_apdone_blk == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bar_V_fu_431_p2 = ($signed(length_V_read_reg_588) + $signed(15'd32767));

assign comb_0_0_address0 = zext_ln544_fu_460_p1;

assign comb_0_1_address0 = zext_ln544_fu_460_p1;

assign comb_1_0_address0 = zext_ln544_fu_460_p1;

assign comb_1_1_address0 = zext_ln544_fu_460_p1;

assign comb_2_0_address0 = zext_ln544_fu_460_p1;

assign comb_2_1_address0 = zext_ln544_fu_460_p1;

assign comb_3_0_address0 = zext_ln544_fu_460_p1;

assign comb_3_1_address0 = zext_ln544_fu_460_p1;

assign comb_4_0_address0 = zext_ln544_fu_460_p1;

assign comb_4_1_address0 = zext_ln544_fu_460_p1;

assign comb_5_0_address0 = zext_ln544_fu_460_p1;

assign comb_5_1_address0 = zext_ln544_fu_460_p1;

assign comb_6_0_address0 = zext_ln544_fu_460_p1;

assign comb_6_1_address0 = zext_ln544_fu_460_p1;

assign comb_7_0_address0 = zext_ln544_fu_460_p1;

assign comb_7_1_address0 = zext_ln544_fu_460_p1;

assign icmp_ln879_1_fu_480_p2 = ((t_V_1_reg_406 == bar_V_reg_599) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_436_p2 = ((t_V_reg_417 == 15'd0) ? 1'b1 : 1'b0);

assign iout_TDATA_int = {{{{{{{{comb_7_0_q0}, {comb_6_0_q0}}, {comb_5_0_q0}}, {comb_4_0_q0}}, {comb_3_0_q0}}, {comb_2_0_q0}}, {comb_1_0_q0}}, {comb_0_0_q0}};

assign iout_TLAST_int = tmp_last_reg_613;

assign iout_TVALID = regslice_both_iout_V_data_V_U_vld_out;

assign iqout_TDATA_int = {{{{{{{{{{{{{{{{comb_7_1_q0}, {comb_7_0_q0}}, {comb_6_1_q0}}, {comb_6_0_q0}}, {comb_5_1_q0}}, {comb_5_0_q0}}, {comb_4_1_q0}}, {comb_4_0_q0}}, {comb_3_1_q0}}, {comb_3_0_q0}}, {comb_2_1_q0}}, {comb_2_0_q0}}, {comb_1_1_q0}}, {comb_1_0_q0}}, {comb_0_1_q0}}, {comb_0_0_q0}};

assign iqout_TLAST_int = tmp_last_reg_613;

assign iqout_TVALID = regslice_both_iqout_V_data_V_U_vld_out;

assign last_counter_V_2_fu_448_p3 = ((icmp_ln879_fu_436_p2[0:0] === 1'b1) ? last_counter_V_3_reg_593 : last_counter_V_fu_442_p2);

assign last_counter_V_3_fu_426_p2 = ($signed(replay_length_V_read_reg_578) + $signed(15'd32767));

assign last_counter_V_fu_442_p2 = ($signed(t_V_reg_417) + $signed(15'd32767));

assign qout_TDATA_int = {{{{{{{{comb_7_1_q0}, {comb_6_1_q0}}, {comb_5_1_q0}}, {comb_4_1_q0}}, {comb_3_1_q0}}, {comb_2_1_q0}}, {comb_1_1_q0}}, {comb_0_1_q0}};

assign qout_TLAST_int = tmp_last_reg_613;

assign qout_TVALID = regslice_both_qout_V_data_V_U_vld_out;

assign run_read_read_fu_162_p2 = run;

assign sample_V_1_fu_491_p3 = ((icmp_ln879_1_fu_480_p2[0:0] === 1'b1) ? 15'd0 : sample_V_fu_485_p2);

assign sample_V_fu_485_p2 = (t_V_1_reg_406 + 15'd1);

assign tmp_last_fu_455_p2 = (tlast_read_reg_583 & icmp_ln879_fu_436_p2);

assign zext_ln544_fu_460_p1 = t_V_1_reg_406;

endmodule //dac_table_axilite
