-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dac_table_axim is
generic (
    C_M_AXI_CONTROL_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_CONTROL_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CONTROL_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CONTROL_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CONTROL_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CONTROL_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CONTROL_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CONTROL_USER_VALUE : INTEGER := 0;
    C_M_AXI_CONTROL_PROT_VALUE : INTEGER := 0;
    C_M_AXI_CONTROL_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_control_AWVALID : OUT STD_LOGIC;
    m_axi_control_AWREADY : IN STD_LOGIC;
    m_axi_control_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    m_axi_control_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CONTROL_ID_WIDTH-1 downto 0);
    m_axi_control_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_control_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_control_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_control_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_control_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_control_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_control_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_control_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_control_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CONTROL_AWUSER_WIDTH-1 downto 0);
    m_axi_control_WVALID : OUT STD_LOGIC;
    m_axi_control_WREADY : IN STD_LOGIC;
    m_axi_control_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    m_axi_control_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    m_axi_control_WLAST : OUT STD_LOGIC;
    m_axi_control_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CONTROL_ID_WIDTH-1 downto 0);
    m_axi_control_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CONTROL_WUSER_WIDTH-1 downto 0);
    m_axi_control_ARVALID : OUT STD_LOGIC;
    m_axi_control_ARREADY : IN STD_LOGIC;
    m_axi_control_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    m_axi_control_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CONTROL_ID_WIDTH-1 downto 0);
    m_axi_control_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_control_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_control_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_control_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_control_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_control_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_control_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_control_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_control_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CONTROL_ARUSER_WIDTH-1 downto 0);
    m_axi_control_RVALID : IN STD_LOGIC;
    m_axi_control_RREADY : OUT STD_LOGIC;
    m_axi_control_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    m_axi_control_RLAST : IN STD_LOGIC;
    m_axi_control_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CONTROL_ID_WIDTH-1 downto 0);
    m_axi_control_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CONTROL_RUSER_WIDTH-1 downto 0);
    m_axi_control_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_control_BVALID : IN STD_LOGIC;
    m_axi_control_BREADY : OUT STD_LOGIC;
    m_axi_control_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_control_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CONTROL_ID_WIDTH-1 downto 0);
    m_axi_control_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CONTROL_BUSER_WIDTH-1 downto 0);
    iout_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    iout_TVALID : OUT STD_LOGIC;
    iout_TREADY : IN STD_LOGIC;
    iout_TLAST : OUT STD_LOGIC;
    qout_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    qout_TVALID : OUT STD_LOGIC;
    qout_TREADY : IN STD_LOGIC;
    qout_TLAST : OUT STD_LOGIC;
    iqout_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    iqout_TVALID : OUT STD_LOGIC;
    iqout_TREADY : IN STD_LOGIC;
    iqout_TUSER : OUT STD_LOGIC_VECTOR (7 downto 0);
    iqout_TLAST : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of dac_table_axim is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dac_table_axim,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=3.906000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.417750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=466,HLS_SYN_DSP=0,HLS_SYN_FF=881,HLS_SYN_LUT=1362,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_40000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (31 downto 0);
    signal length_V : STD_LOGIC_VECTOR (14 downto 0);
    signal tlast : STD_LOGIC;
    signal replay_length_V : STD_LOGIC_VECTOR (14 downto 0);
    signal run : STD_LOGIC;
    signal control_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal control_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal iout_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal run_read_reg_1190 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal run_read_reg_1190_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal qout_TDATA_blk_n : STD_LOGIC;
    signal iqout_TDATA_blk_n : STD_LOGIC;
    signal control_AWREADY : STD_LOGIC;
    signal control_WREADY : STD_LOGIC;
    signal control_ARVALID : STD_LOGIC;
    signal control_ARREADY : STD_LOGIC;
    signal control_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal control_RVALID : STD_LOGIC;
    signal control_RREADY : STD_LOGIC;
    signal control_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal control_RLAST : STD_LOGIC;
    signal control_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal control_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal control_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal control_BVALID : STD_LOGIC;
    signal control_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal control_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal control_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln31_reg_607 : STD_LOGIC_VECTOR (18 downto 0);
    signal t_V_1_reg_618 : STD_LOGIC_VECTOR (14 downto 0);
    signal t_V_reg_629 : STD_LOGIC_VECTOR (14 downto 0);
    signal replay_length_V_read_reg_1115 : STD_LOGIC_VECTOR (14 downto 0);
    signal tlast_read_reg_1120 : STD_LOGIC_VECTOR (0 downto 0);
    signal length_V_read_reg_1125 : STD_LOGIC_VECTOR (14 downto 0);
    signal a1_reg_1130 : STD_LOGIC_VECTOR (29 downto 0);
    signal last_counter_V_3_fu_658_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal last_counter_V_3_reg_1141 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal bar_V_fu_663_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal bar_V_reg_1147 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln31_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln31_fu_674_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal lshr_ln_reg_1161 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln_reg_1161_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln31_fu_690_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln31_reg_1166 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln31_reg_1166_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal control_addr_read_reg_1170 : STD_LOGIC_VECTOR (31 downto 0);
    signal run_read_read_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state13_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_io : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal last_counter_V_2_fu_725_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_last_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_reg_1199 : STD_LOGIC_VECTOR (0 downto 0);
    signal iqtmp_user_V_fu_757_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal iqtmp_user_V_reg_1286 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_V_1_fu_772_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state13 : STD_LOGIC;
    signal comb_0_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal comb_0_ce0 : STD_LOGIC;
    signal comb_0_we0 : STD_LOGIC;
    signal comb_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal comb_1_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal comb_1_ce0 : STD_LOGIC;
    signal comb_1_we0 : STD_LOGIC;
    signal comb_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal comb_2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal comb_2_ce0 : STD_LOGIC;
    signal comb_2_we0 : STD_LOGIC;
    signal comb_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal comb_3_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal comb_3_ce0 : STD_LOGIC;
    signal comb_3_we0 : STD_LOGIC;
    signal comb_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal comb_4_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal comb_4_ce0 : STD_LOGIC;
    signal comb_4_we0 : STD_LOGIC;
    signal comb_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal comb_5_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal comb_5_ce0 : STD_LOGIC;
    signal comb_5_we0 : STD_LOGIC;
    signal comb_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal comb_6_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal comb_6_ce0 : STD_LOGIC;
    signal comb_6_we0 : STD_LOGIC;
    signal comb_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal comb_7_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal comb_7_ce0 : STD_LOGIC;
    signal comb_7_we0 : STD_LOGIC;
    signal comb_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal comb_8_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal comb_8_ce0 : STD_LOGIC;
    signal comb_8_we0 : STD_LOGIC;
    signal comb_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal comb_9_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal comb_9_ce0 : STD_LOGIC;
    signal comb_9_we0 : STD_LOGIC;
    signal comb_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal comb_10_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal comb_10_ce0 : STD_LOGIC;
    signal comb_10_we0 : STD_LOGIC;
    signal comb_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal comb_11_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal comb_11_ce0 : STD_LOGIC;
    signal comb_11_we0 : STD_LOGIC;
    signal comb_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal comb_12_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal comb_12_ce0 : STD_LOGIC;
    signal comb_12_we0 : STD_LOGIC;
    signal comb_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal comb_13_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal comb_13_ce0 : STD_LOGIC;
    signal comb_13_we0 : STD_LOGIC;
    signal comb_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal comb_14_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal comb_14_ce0 : STD_LOGIC;
    signal comb_14_we0 : STD_LOGIC;
    signal comb_14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal comb_15_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal comb_15_ce0 : STD_LOGIC;
    signal comb_15_we0 : STD_LOGIC;
    signal comb_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln31_fu_694_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal icmp_ln879_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_counter_V_fu_719_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln879_1_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sample_V_fu_766_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln244_31_fu_990_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_29_fu_976_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_27_fu_962_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_25_fu_948_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_23_fu_934_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_21_fu_920_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_19_fu_906_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_17_fu_892_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_15_fu_878_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_13_fu_864_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_11_fu_850_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_8_fu_836_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_6_fu_822_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_4_fu_808_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_2_fu_794_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_fu_780_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_28_fu_1031_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_26_fu_980_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_24_fu_966_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_22_fu_952_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_20_fu_938_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_18_fu_924_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_16_fu_910_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_14_fu_896_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_12_fu_882_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_10_fu_868_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_s_fu_854_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_9_fu_840_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_7_fu_826_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_5_fu_812_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_3_fu_798_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_1_fu_784_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal regslice_both_iout_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_qout_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_iqout_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state16 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal iout_TDATA_int : STD_LOGIC_VECTOR (255 downto 0);
    signal iout_TVALID_int : STD_LOGIC;
    signal iout_TREADY_int : STD_LOGIC;
    signal regslice_both_iout_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_iout_V_last_U_apdone_blk : STD_LOGIC;
    signal iout_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_iout_V_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_iout_V_last_U_vld_out : STD_LOGIC;
    signal qout_TDATA_int : STD_LOGIC_VECTOR (255 downto 0);
    signal qout_TVALID_int : STD_LOGIC;
    signal qout_TREADY_int : STD_LOGIC;
    signal regslice_both_qout_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_qout_V_last_U_apdone_blk : STD_LOGIC;
    signal qout_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_qout_V_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_qout_V_last_U_vld_out : STD_LOGIC;
    signal iqout_TDATA_int : STD_LOGIC_VECTOR (511 downto 0);
    signal iqout_TVALID_int : STD_LOGIC;
    signal iqout_TREADY_int : STD_LOGIC;
    signal regslice_both_iqout_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_iqout_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_iqout_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_iqout_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_iqout_V_last_U_apdone_blk : STD_LOGIC;
    signal iqout_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_iqout_V_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_iqout_V_last_U_vld_out : STD_LOGIC;

    component dac_table_axim_cobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dac_table_axim_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        a : OUT STD_LOGIC_VECTOR (31 downto 0);
        length_V : OUT STD_LOGIC_VECTOR (14 downto 0);
        tlast : OUT STD_LOGIC;
        replay_length_V : OUT STD_LOGIC_VECTOR (14 downto 0);
        run : OUT STD_LOGIC );
    end component;


    component dac_table_axim_control_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    dac_table_axim_control_s_axi_U : component dac_table_axim_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        a => a,
        length_V => length_V,
        tlast => tlast,
        replay_length_V => replay_length_V,
        run => run);

    dac_table_axim_control_m_axi_U : component dac_table_axim_control_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 1,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 256,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_CONTROL_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_CONTROL_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_CONTROL_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_CONTROL_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_CONTROL_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_CONTROL_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_CONTROL_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_CONTROL_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_CONTROL_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_CONTROL_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_CONTROL_CACHE_VALUE)
    port map (
        AWVALID => m_axi_control_AWVALID,
        AWREADY => m_axi_control_AWREADY,
        AWADDR => m_axi_control_AWADDR,
        AWID => m_axi_control_AWID,
        AWLEN => m_axi_control_AWLEN,
        AWSIZE => m_axi_control_AWSIZE,
        AWBURST => m_axi_control_AWBURST,
        AWLOCK => m_axi_control_AWLOCK,
        AWCACHE => m_axi_control_AWCACHE,
        AWPROT => m_axi_control_AWPROT,
        AWQOS => m_axi_control_AWQOS,
        AWREGION => m_axi_control_AWREGION,
        AWUSER => m_axi_control_AWUSER,
        WVALID => m_axi_control_WVALID,
        WREADY => m_axi_control_WREADY,
        WDATA => m_axi_control_WDATA,
        WSTRB => m_axi_control_WSTRB,
        WLAST => m_axi_control_WLAST,
        WID => m_axi_control_WID,
        WUSER => m_axi_control_WUSER,
        ARVALID => m_axi_control_ARVALID,
        ARREADY => m_axi_control_ARREADY,
        ARADDR => m_axi_control_ARADDR,
        ARID => m_axi_control_ARID,
        ARLEN => m_axi_control_ARLEN,
        ARSIZE => m_axi_control_ARSIZE,
        ARBURST => m_axi_control_ARBURST,
        ARLOCK => m_axi_control_ARLOCK,
        ARCACHE => m_axi_control_ARCACHE,
        ARPROT => m_axi_control_ARPROT,
        ARQOS => m_axi_control_ARQOS,
        ARREGION => m_axi_control_ARREGION,
        ARUSER => m_axi_control_ARUSER,
        RVALID => m_axi_control_RVALID,
        RREADY => m_axi_control_RREADY,
        RDATA => m_axi_control_RDATA,
        RLAST => m_axi_control_RLAST,
        RID => m_axi_control_RID,
        RUSER => m_axi_control_RUSER,
        RRESP => m_axi_control_RRESP,
        BVALID => m_axi_control_BVALID,
        BREADY => m_axi_control_BREADY,
        BRESP => m_axi_control_BRESP,
        BID => m_axi_control_BID,
        BUSER => m_axi_control_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => control_ARVALID,
        I_ARREADY => control_ARREADY,
        I_ARADDR => control_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_40000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => control_RVALID,
        I_RREADY => control_RREADY,
        I_RDATA => control_RDATA,
        I_RID => control_RID,
        I_RUSER => control_RUSER,
        I_RRESP => control_RRESP,
        I_RLAST => control_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => control_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => control_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => control_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => control_BRESP,
        I_BID => control_BID,
        I_BUSER => control_BUSER);

    comb_0_U : component dac_table_axim_cobkb
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => comb_0_address0,
        ce0 => comb_0_ce0,
        we0 => comb_0_we0,
        d0 => control_addr_read_reg_1170,
        q0 => comb_0_q0);

    comb_1_U : component dac_table_axim_cobkb
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => comb_1_address0,
        ce0 => comb_1_ce0,
        we0 => comb_1_we0,
        d0 => control_addr_read_reg_1170,
        q0 => comb_1_q0);

    comb_2_U : component dac_table_axim_cobkb
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => comb_2_address0,
        ce0 => comb_2_ce0,
        we0 => comb_2_we0,
        d0 => control_addr_read_reg_1170,
        q0 => comb_2_q0);

    comb_3_U : component dac_table_axim_cobkb
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => comb_3_address0,
        ce0 => comb_3_ce0,
        we0 => comb_3_we0,
        d0 => control_addr_read_reg_1170,
        q0 => comb_3_q0);

    comb_4_U : component dac_table_axim_cobkb
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => comb_4_address0,
        ce0 => comb_4_ce0,
        we0 => comb_4_we0,
        d0 => control_addr_read_reg_1170,
        q0 => comb_4_q0);

    comb_5_U : component dac_table_axim_cobkb
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => comb_5_address0,
        ce0 => comb_5_ce0,
        we0 => comb_5_we0,
        d0 => control_addr_read_reg_1170,
        q0 => comb_5_q0);

    comb_6_U : component dac_table_axim_cobkb
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => comb_6_address0,
        ce0 => comb_6_ce0,
        we0 => comb_6_we0,
        d0 => control_addr_read_reg_1170,
        q0 => comb_6_q0);

    comb_7_U : component dac_table_axim_cobkb
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => comb_7_address0,
        ce0 => comb_7_ce0,
        we0 => comb_7_we0,
        d0 => control_addr_read_reg_1170,
        q0 => comb_7_q0);

    comb_8_U : component dac_table_axim_cobkb
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => comb_8_address0,
        ce0 => comb_8_ce0,
        we0 => comb_8_we0,
        d0 => control_addr_read_reg_1170,
        q0 => comb_8_q0);

    comb_9_U : component dac_table_axim_cobkb
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => comb_9_address0,
        ce0 => comb_9_ce0,
        we0 => comb_9_we0,
        d0 => control_addr_read_reg_1170,
        q0 => comb_9_q0);

    comb_10_U : component dac_table_axim_cobkb
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => comb_10_address0,
        ce0 => comb_10_ce0,
        we0 => comb_10_we0,
        d0 => control_addr_read_reg_1170,
        q0 => comb_10_q0);

    comb_11_U : component dac_table_axim_cobkb
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => comb_11_address0,
        ce0 => comb_11_ce0,
        we0 => comb_11_we0,
        d0 => control_addr_read_reg_1170,
        q0 => comb_11_q0);

    comb_12_U : component dac_table_axim_cobkb
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => comb_12_address0,
        ce0 => comb_12_ce0,
        we0 => comb_12_we0,
        d0 => control_addr_read_reg_1170,
        q0 => comb_12_q0);

    comb_13_U : component dac_table_axim_cobkb
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => comb_13_address0,
        ce0 => comb_13_ce0,
        we0 => comb_13_we0,
        d0 => control_addr_read_reg_1170,
        q0 => comb_13_q0);

    comb_14_U : component dac_table_axim_cobkb
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => comb_14_address0,
        ce0 => comb_14_ce0,
        we0 => comb_14_we0,
        d0 => control_addr_read_reg_1170,
        q0 => comb_14_q0);

    comb_15_U : component dac_table_axim_cobkb
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => comb_15_address0,
        ce0 => comb_15_ce0,
        we0 => comb_15_we0,
        d0 => control_addr_read_reg_1170,
        q0 => comb_15_q0);

    regslice_both_iout_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iout_TDATA_int,
        vld_in => iout_TVALID_int,
        ack_in => iout_TREADY_int,
        data_out => iout_TDATA,
        vld_out => regslice_both_iout_V_data_V_U_vld_out,
        ack_out => iout_TREADY,
        apdone_blk => regslice_both_iout_V_data_V_U_apdone_blk);

    regslice_both_w1_iout_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iout_TLAST_int,
        vld_in => iout_TVALID_int,
        ack_in => regslice_both_w1_iout_V_last_U_ack_in_dummy,
        data_out => iout_TLAST,
        vld_out => regslice_both_w1_iout_V_last_U_vld_out,
        ack_out => iout_TREADY,
        apdone_blk => regslice_both_w1_iout_V_last_U_apdone_blk);

    regslice_both_qout_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => qout_TDATA_int,
        vld_in => qout_TVALID_int,
        ack_in => qout_TREADY_int,
        data_out => qout_TDATA,
        vld_out => regslice_both_qout_V_data_V_U_vld_out,
        ack_out => qout_TREADY,
        apdone_blk => regslice_both_qout_V_data_V_U_apdone_blk);

    regslice_both_w1_qout_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => qout_TLAST_int,
        vld_in => qout_TVALID_int,
        ack_in => regslice_both_w1_qout_V_last_U_ack_in_dummy,
        data_out => qout_TLAST,
        vld_out => regslice_both_w1_qout_V_last_U_vld_out,
        ack_out => qout_TREADY,
        apdone_blk => regslice_both_w1_qout_V_last_U_apdone_blk);

    regslice_both_iqout_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iqout_TDATA_int,
        vld_in => iqout_TVALID_int,
        ack_in => iqout_TREADY_int,
        data_out => iqout_TDATA,
        vld_out => regslice_both_iqout_V_data_V_U_vld_out,
        ack_out => iqout_TREADY,
        apdone_blk => regslice_both_iqout_V_data_V_U_apdone_blk);

    regslice_both_iqout_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iqtmp_user_V_reg_1286,
        vld_in => iqout_TVALID_int,
        ack_in => regslice_both_iqout_V_user_V_U_ack_in_dummy,
        data_out => iqout_TUSER,
        vld_out => regslice_both_iqout_V_user_V_U_vld_out,
        ack_out => iqout_TREADY,
        apdone_blk => regslice_both_iqout_V_user_V_U_apdone_blk);

    regslice_both_w1_iqout_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iqout_TLAST_int,
        vld_in => iqout_TVALID_int,
        ack_in => regslice_both_w1_iqout_V_last_U_ack_in_dummy,
        data_out => iqout_TLAST,
        vld_out => regslice_both_w1_iqout_V_last_U_vld_out,
        ack_out => iqout_TREADY,
        apdone_blk => regslice_both_w1_iqout_V_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    phi_ln31_reg_607_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln31_fu_668_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phi_ln31_reg_607 <= add_ln31_fu_674_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_ln31_reg_607 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    t_V_1_reg_618_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                t_V_1_reg_618 <= ap_const_lv15_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (run_read_read_fu_264_p2 = ap_const_lv1_1))) then 
                t_V_1_reg_618 <= sample_V_1_fu_772_p3;
            end if; 
        end if;
    end process;

    t_V_reg_629_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                t_V_reg_629 <= last_counter_V_3_reg_1141;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (run_read_read_fu_264_p2 = ap_const_lv1_1))) then 
                t_V_reg_629 <= last_counter_V_2_fu_725_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                a1_reg_1130 <= a(31 downto 2);
                length_V_read_reg_1125 <= length_V;
                replay_length_V_read_reg_1115 <= replay_length_V;
                tlast_read_reg_1120 <= (0=>tlast, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                bar_V_reg_1147 <= bar_V_fu_663_p2;
                last_counter_V_3_reg_1141 <= last_counter_V_3_fu_658_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                control_addr_read_reg_1170 <= control_RDATA;
                lshr_ln_reg_1161_pp0_iter1_reg <= lshr_ln_reg_1161;
                trunc_ln31_reg_1166_pp0_iter1_reg <= trunc_ln31_reg_1166;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (run_read_read_fu_264_p2 = ap_const_lv1_1))) then
                iqtmp_user_V_reg_1286 <= iqtmp_user_V_fu_757_p1;
                tmp_last_reg_1199 <= tmp_last_fu_732_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln31_fu_668_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln_reg_1161 <= phi_ln31_reg_607(18 downto 4);
                trunc_ln31_reg_1166 <= trunc_ln31_fu_690_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                run_read_reg_1190 <= (0=>run, others=>'-');
                run_read_reg_1190_pp1_iter1_reg <= run_read_reg_1190;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, control_ARREADY, icmp_ln31_fu_668_p2, ap_enable_reg_pp0_iter0, run_read_read_fu_264_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_CS_fsm_state16, regslice_both_iout_V_data_V_U_apdone_blk, regslice_both_qout_V_data_V_U_apdone_blk, regslice_both_iqout_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((control_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln31_fu_668_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln31_fu_668_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (run_read_read_fu_264_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (run_read_read_fu_264_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                if ((not(((regslice_both_iqout_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_qout_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_iout_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln31_fu_674_p2 <= std_logic_vector(unsigned(phi_ln31_reg_607) + unsigned(ap_const_lv19_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state16 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, control_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((control_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, control_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((control_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state14_io, ap_block_state15_io)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state14_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state14_io, ap_block_state15_io)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state14_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(control_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= (control_RVALID = ap_const_logic_0);
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_io_assign_proc : process(run_read_reg_1190, iout_TREADY_int, qout_TREADY_int, iqout_TREADY_int)
    begin
                ap_block_state14_io <= (((iqout_TREADY_int = ap_const_logic_0) and (run_read_reg_1190 = ap_const_lv1_1)) or ((qout_TREADY_int = ap_const_logic_0) and (run_read_reg_1190 = ap_const_lv1_1)) or ((iout_TREADY_int = ap_const_logic_0) and (run_read_reg_1190 = ap_const_lv1_1)));
    end process;

        ap_block_state14_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_io_assign_proc : process(run_read_reg_1190_pp1_iter1_reg, iout_TREADY_int, qout_TREADY_int, iqout_TREADY_int)
    begin
                ap_block_state15_io <= (((iqout_TREADY_int = ap_const_logic_0) and (run_read_reg_1190_pp1_iter1_reg = ap_const_lv1_1)) or ((qout_TREADY_int = ap_const_logic_0) and (run_read_reg_1190_pp1_iter1_reg = ap_const_lv1_1)) or ((iout_TREADY_int = ap_const_logic_0) and (run_read_reg_1190_pp1_iter1_reg = ap_const_lv1_1)));
    end process;

        ap_block_state15_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_assign_proc : process(regslice_both_iout_V_data_V_U_apdone_blk, regslice_both_qout_V_data_V_U_apdone_blk, regslice_both_iqout_V_data_V_U_apdone_blk)
    begin
                ap_block_state16 <= ((regslice_both_iqout_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_qout_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_iout_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln31_fu_668_p2)
    begin
        if ((icmp_ln31_fu_668_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state13_assign_proc : process(run_read_read_fu_264_p2)
    begin
        if ((run_read_read_fu_264_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state16, regslice_both_iout_V_data_V_U_apdone_blk, regslice_both_qout_V_data_V_U_apdone_blk, regslice_both_iqout_V_data_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_iqout_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_qout_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_iout_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16, regslice_both_iout_V_data_V_U_apdone_blk, regslice_both_qout_V_data_V_U_apdone_blk, regslice_both_iqout_V_data_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_iqout_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_qout_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_iout_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bar_V_fu_663_p2 <= std_logic_vector(unsigned(length_V_read_reg_1125) + unsigned(ap_const_lv15_7FFF));

    comb_0_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, zext_ln31_fu_694_p1, zext_ln544_fu_737_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            comb_0_address0 <= zext_ln544_fu_737_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            comb_0_address0 <= zext_ln31_fu_694_p1(14 - 1 downto 0);
        else 
            comb_0_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    comb_0_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            comb_0_ce0 <= ap_const_logic_1;
        else 
            comb_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln31_reg_1166_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln31_reg_1166_pp0_iter1_reg = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            comb_0_we0 <= ap_const_logic_1;
        else 
            comb_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_10_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, zext_ln31_fu_694_p1, zext_ln544_fu_737_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            comb_10_address0 <= zext_ln544_fu_737_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            comb_10_address0 <= zext_ln31_fu_694_p1(14 - 1 downto 0);
        else 
            comb_10_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    comb_10_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            comb_10_ce0 <= ap_const_logic_1;
        else 
            comb_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_10_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln31_reg_1166_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln31_reg_1166_pp0_iter1_reg = ap_const_lv4_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            comb_10_we0 <= ap_const_logic_1;
        else 
            comb_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_11_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, zext_ln31_fu_694_p1, zext_ln544_fu_737_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            comb_11_address0 <= zext_ln544_fu_737_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            comb_11_address0 <= zext_ln31_fu_694_p1(14 - 1 downto 0);
        else 
            comb_11_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    comb_11_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            comb_11_ce0 <= ap_const_logic_1;
        else 
            comb_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_11_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln31_reg_1166_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln31_reg_1166_pp0_iter1_reg = ap_const_lv4_B) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            comb_11_we0 <= ap_const_logic_1;
        else 
            comb_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_12_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, zext_ln31_fu_694_p1, zext_ln544_fu_737_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            comb_12_address0 <= zext_ln544_fu_737_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            comb_12_address0 <= zext_ln31_fu_694_p1(14 - 1 downto 0);
        else 
            comb_12_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    comb_12_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            comb_12_ce0 <= ap_const_logic_1;
        else 
            comb_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_12_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln31_reg_1166_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln31_reg_1166_pp0_iter1_reg = ap_const_lv4_C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            comb_12_we0 <= ap_const_logic_1;
        else 
            comb_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_13_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, zext_ln31_fu_694_p1, zext_ln544_fu_737_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            comb_13_address0 <= zext_ln544_fu_737_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            comb_13_address0 <= zext_ln31_fu_694_p1(14 - 1 downto 0);
        else 
            comb_13_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    comb_13_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            comb_13_ce0 <= ap_const_logic_1;
        else 
            comb_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_13_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln31_reg_1166_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln31_reg_1166_pp0_iter1_reg = ap_const_lv4_D) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            comb_13_we0 <= ap_const_logic_1;
        else 
            comb_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_14_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, zext_ln31_fu_694_p1, zext_ln544_fu_737_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            comb_14_address0 <= zext_ln544_fu_737_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            comb_14_address0 <= zext_ln31_fu_694_p1(14 - 1 downto 0);
        else 
            comb_14_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    comb_14_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            comb_14_ce0 <= ap_const_logic_1;
        else 
            comb_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_14_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln31_reg_1166_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln31_reg_1166_pp0_iter1_reg = ap_const_lv4_E) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            comb_14_we0 <= ap_const_logic_1;
        else 
            comb_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_15_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, zext_ln31_fu_694_p1, zext_ln544_fu_737_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            comb_15_address0 <= zext_ln544_fu_737_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            comb_15_address0 <= zext_ln31_fu_694_p1(14 - 1 downto 0);
        else 
            comb_15_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    comb_15_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            comb_15_ce0 <= ap_const_logic_1;
        else 
            comb_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_15_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln31_reg_1166_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln31_reg_1166_pp0_iter1_reg = ap_const_lv4_F) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            comb_15_we0 <= ap_const_logic_1;
        else 
            comb_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_1_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, zext_ln31_fu_694_p1, zext_ln544_fu_737_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            comb_1_address0 <= zext_ln544_fu_737_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            comb_1_address0 <= zext_ln31_fu_694_p1(14 - 1 downto 0);
        else 
            comb_1_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    comb_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            comb_1_ce0 <= ap_const_logic_1;
        else 
            comb_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln31_reg_1166_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln31_reg_1166_pp0_iter1_reg = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            comb_1_we0 <= ap_const_logic_1;
        else 
            comb_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_2_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, zext_ln31_fu_694_p1, zext_ln544_fu_737_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            comb_2_address0 <= zext_ln544_fu_737_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            comb_2_address0 <= zext_ln31_fu_694_p1(14 - 1 downto 0);
        else 
            comb_2_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    comb_2_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            comb_2_ce0 <= ap_const_logic_1;
        else 
            comb_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln31_reg_1166_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln31_reg_1166_pp0_iter1_reg = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            comb_2_we0 <= ap_const_logic_1;
        else 
            comb_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_3_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, zext_ln31_fu_694_p1, zext_ln544_fu_737_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            comb_3_address0 <= zext_ln544_fu_737_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            comb_3_address0 <= zext_ln31_fu_694_p1(14 - 1 downto 0);
        else 
            comb_3_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    comb_3_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            comb_3_ce0 <= ap_const_logic_1;
        else 
            comb_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln31_reg_1166_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln31_reg_1166_pp0_iter1_reg = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            comb_3_we0 <= ap_const_logic_1;
        else 
            comb_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_4_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, zext_ln31_fu_694_p1, zext_ln544_fu_737_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            comb_4_address0 <= zext_ln544_fu_737_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            comb_4_address0 <= zext_ln31_fu_694_p1(14 - 1 downto 0);
        else 
            comb_4_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    comb_4_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            comb_4_ce0 <= ap_const_logic_1;
        else 
            comb_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_4_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln31_reg_1166_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln31_reg_1166_pp0_iter1_reg = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            comb_4_we0 <= ap_const_logic_1;
        else 
            comb_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_5_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, zext_ln31_fu_694_p1, zext_ln544_fu_737_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            comb_5_address0 <= zext_ln544_fu_737_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            comb_5_address0 <= zext_ln31_fu_694_p1(14 - 1 downto 0);
        else 
            comb_5_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    comb_5_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            comb_5_ce0 <= ap_const_logic_1;
        else 
            comb_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_5_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln31_reg_1166_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln31_reg_1166_pp0_iter1_reg = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            comb_5_we0 <= ap_const_logic_1;
        else 
            comb_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_6_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, zext_ln31_fu_694_p1, zext_ln544_fu_737_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            comb_6_address0 <= zext_ln544_fu_737_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            comb_6_address0 <= zext_ln31_fu_694_p1(14 - 1 downto 0);
        else 
            comb_6_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    comb_6_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            comb_6_ce0 <= ap_const_logic_1;
        else 
            comb_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_6_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln31_reg_1166_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln31_reg_1166_pp0_iter1_reg = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            comb_6_we0 <= ap_const_logic_1;
        else 
            comb_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_7_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, zext_ln31_fu_694_p1, zext_ln544_fu_737_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            comb_7_address0 <= zext_ln544_fu_737_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            comb_7_address0 <= zext_ln31_fu_694_p1(14 - 1 downto 0);
        else 
            comb_7_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    comb_7_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            comb_7_ce0 <= ap_const_logic_1;
        else 
            comb_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_7_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln31_reg_1166_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln31_reg_1166_pp0_iter1_reg = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            comb_7_we0 <= ap_const_logic_1;
        else 
            comb_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_8_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, zext_ln31_fu_694_p1, zext_ln544_fu_737_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            comb_8_address0 <= zext_ln544_fu_737_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            comb_8_address0 <= zext_ln31_fu_694_p1(14 - 1 downto 0);
        else 
            comb_8_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    comb_8_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            comb_8_ce0 <= ap_const_logic_1;
        else 
            comb_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_8_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln31_reg_1166_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln31_reg_1166_pp0_iter1_reg = ap_const_lv4_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            comb_8_we0 <= ap_const_logic_1;
        else 
            comb_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_9_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, zext_ln31_fu_694_p1, zext_ln544_fu_737_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            comb_9_address0 <= zext_ln544_fu_737_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            comb_9_address0 <= zext_ln31_fu_694_p1(14 - 1 downto 0);
        else 
            comb_9_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    comb_9_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            comb_9_ce0 <= ap_const_logic_1;
        else 
            comb_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    comb_9_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln31_reg_1166_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln31_reg_1166_pp0_iter1_reg = ap_const_lv4_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            comb_9_we0 <= ap_const_logic_1;
        else 
            comb_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    control_ARADDR <= empty_fu_648_p1(32 - 1 downto 0);

    control_ARVALID_assign_proc : process(ap_CS_fsm_state2, control_ARREADY)
    begin
        if (((control_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            control_ARVALID <= ap_const_logic_1;
        else 
            control_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    control_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            control_RREADY <= ap_const_logic_1;
        else 
            control_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    control_blk_n_AR_assign_proc : process(m_axi_control_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            control_blk_n_AR <= m_axi_control_ARREADY;
        else 
            control_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    control_blk_n_R_assign_proc : process(m_axi_control_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            control_blk_n_R <= m_axi_control_RVALID;
        else 
            control_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    empty_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a1_reg_1130),64));
    icmp_ln31_fu_668_p2 <= "1" when (phi_ln31_reg_607 = ap_const_lv19_40000) else "0";
    icmp_ln879_1_fu_761_p2 <= "1" when (t_V_1_reg_618 = bar_V_reg_1147) else "0";
    icmp_ln879_fu_713_p2 <= "1" when (t_V_reg_629 = ap_const_lv15_0) else "0";

    iout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, run_read_reg_1190, ap_enable_reg_pp1_iter2, run_read_reg_1190_pp1_iter1_reg, iout_TREADY_int)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (run_read_reg_1190_pp1_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (run_read_reg_1190 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            iout_TDATA_blk_n <= iout_TREADY_int;
        else 
            iout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iout_TDATA_int <= (((((((((((((((trunc_ln244_31_fu_990_p1 & trunc_ln244_29_fu_976_p1) & trunc_ln244_27_fu_962_p1) & trunc_ln244_25_fu_948_p1) & trunc_ln244_23_fu_934_p1) & trunc_ln244_21_fu_920_p1) & trunc_ln244_19_fu_906_p1) & trunc_ln244_17_fu_892_p1) & trunc_ln244_15_fu_878_p1) & trunc_ln244_13_fu_864_p1) & trunc_ln244_11_fu_850_p1) & trunc_ln244_8_fu_836_p1) & trunc_ln244_6_fu_822_p1) & trunc_ln244_4_fu_808_p1) & trunc_ln244_2_fu_794_p1) & trunc_ln244_fu_780_p1);
    iout_TLAST_int <= tmp_last_reg_1199(0);
    iout_TVALID <= regslice_both_iout_V_data_V_U_vld_out;

    iout_TVALID_int_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, run_read_reg_1190, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (run_read_reg_1190 = ap_const_lv1_1))) then 
            iout_TVALID_int <= ap_const_logic_1;
        else 
            iout_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    iqout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, run_read_reg_1190, ap_enable_reg_pp1_iter2, run_read_reg_1190_pp1_iter1_reg, iqout_TREADY_int)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (run_read_reg_1190_pp1_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (run_read_reg_1190 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            iqout_TDATA_blk_n <= iqout_TREADY_int;
        else 
            iqout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iqout_TDATA_int <= (((((((((((((((comb_15_q0 & comb_14_q0) & comb_13_q0) & comb_12_q0) & comb_11_q0) & comb_10_q0) & comb_9_q0) & comb_8_q0) & comb_7_q0) & comb_6_q0) & comb_5_q0) & comb_4_q0) & comb_3_q0) & comb_2_q0) & comb_1_q0) & comb_0_q0);
    iqout_TLAST_int <= tmp_last_reg_1199(0);
    iqout_TVALID <= regslice_both_iqout_V_data_V_U_vld_out;

    iqout_TVALID_int_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, run_read_reg_1190, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (run_read_reg_1190 = ap_const_lv1_1))) then 
            iqout_TVALID_int <= ap_const_logic_1;
        else 
            iqout_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    iqtmp_user_V_fu_757_p1 <= t_V_1_reg_618(8 - 1 downto 0);
    last_counter_V_2_fu_725_p3 <= 
        last_counter_V_3_reg_1141 when (icmp_ln879_fu_713_p2(0) = '1') else 
        last_counter_V_fu_719_p2;
    last_counter_V_3_fu_658_p2 <= std_logic_vector(unsigned(replay_length_V_read_reg_1115) + unsigned(ap_const_lv15_7FFF));
    last_counter_V_fu_719_p2 <= std_logic_vector(signed(ap_const_lv15_7FFF) + signed(t_V_reg_629));

    qout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, run_read_reg_1190, ap_enable_reg_pp1_iter2, run_read_reg_1190_pp1_iter1_reg, qout_TREADY_int)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (run_read_reg_1190_pp1_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (run_read_reg_1190 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            qout_TDATA_blk_n <= qout_TREADY_int;
        else 
            qout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    qout_TDATA_int <= (((((((((((((((trunc_ln244_28_fu_1031_p4 & trunc_ln244_26_fu_980_p4) & trunc_ln244_24_fu_966_p4) & trunc_ln244_22_fu_952_p4) & trunc_ln244_20_fu_938_p4) & trunc_ln244_18_fu_924_p4) & trunc_ln244_16_fu_910_p4) & trunc_ln244_14_fu_896_p4) & trunc_ln244_12_fu_882_p4) & trunc_ln244_10_fu_868_p4) & trunc_ln244_s_fu_854_p4) & trunc_ln244_9_fu_840_p4) & trunc_ln244_7_fu_826_p4) & trunc_ln244_5_fu_812_p4) & trunc_ln244_3_fu_798_p4) & trunc_ln244_1_fu_784_p4);
    qout_TLAST_int <= tmp_last_reg_1199(0);
    qout_TVALID <= regslice_both_qout_V_data_V_U_vld_out;

    qout_TVALID_int_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, run_read_reg_1190, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (run_read_reg_1190 = ap_const_lv1_1))) then 
            qout_TVALID_int <= ap_const_logic_1;
        else 
            qout_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    run_read_read_fu_264_p2 <= (0=>run, others=>'-');
    sample_V_1_fu_772_p3 <= 
        ap_const_lv15_0 when (icmp_ln879_1_fu_761_p2(0) = '1') else 
        sample_V_fu_766_p2;
    sample_V_fu_766_p2 <= std_logic_vector(unsigned(ap_const_lv15_1) + unsigned(t_V_1_reg_618));
    tmp_last_fu_732_p2 <= (tlast_read_reg_1120 and icmp_ln879_fu_713_p2);
    trunc_ln244_10_fu_868_p4 <= comb_6_q0(31 downto 16);
    trunc_ln244_11_fu_850_p1 <= comb_5_q0(16 - 1 downto 0);
    trunc_ln244_12_fu_882_p4 <= comb_7_q0(31 downto 16);
    trunc_ln244_13_fu_864_p1 <= comb_6_q0(16 - 1 downto 0);
    trunc_ln244_14_fu_896_p4 <= comb_8_q0(31 downto 16);
    trunc_ln244_15_fu_878_p1 <= comb_7_q0(16 - 1 downto 0);
    trunc_ln244_16_fu_910_p4 <= comb_9_q0(31 downto 16);
    trunc_ln244_17_fu_892_p1 <= comb_8_q0(16 - 1 downto 0);
    trunc_ln244_18_fu_924_p4 <= comb_10_q0(31 downto 16);
    trunc_ln244_19_fu_906_p1 <= comb_9_q0(16 - 1 downto 0);
    trunc_ln244_1_fu_784_p4 <= comb_0_q0(31 downto 16);
    trunc_ln244_20_fu_938_p4 <= comb_11_q0(31 downto 16);
    trunc_ln244_21_fu_920_p1 <= comb_10_q0(16 - 1 downto 0);
    trunc_ln244_22_fu_952_p4 <= comb_12_q0(31 downto 16);
    trunc_ln244_23_fu_934_p1 <= comb_11_q0(16 - 1 downto 0);
    trunc_ln244_24_fu_966_p4 <= comb_13_q0(31 downto 16);
    trunc_ln244_25_fu_948_p1 <= comb_12_q0(16 - 1 downto 0);
    trunc_ln244_26_fu_980_p4 <= comb_14_q0(31 downto 16);
    trunc_ln244_27_fu_962_p1 <= comb_13_q0(16 - 1 downto 0);
    trunc_ln244_28_fu_1031_p4 <= comb_15_q0(31 downto 16);
    trunc_ln244_29_fu_976_p1 <= comb_14_q0(16 - 1 downto 0);
    trunc_ln244_2_fu_794_p1 <= comb_1_q0(16 - 1 downto 0);
    trunc_ln244_31_fu_990_p1 <= comb_15_q0(16 - 1 downto 0);
    trunc_ln244_3_fu_798_p4 <= comb_1_q0(31 downto 16);
    trunc_ln244_4_fu_808_p1 <= comb_2_q0(16 - 1 downto 0);
    trunc_ln244_5_fu_812_p4 <= comb_2_q0(31 downto 16);
    trunc_ln244_6_fu_822_p1 <= comb_3_q0(16 - 1 downto 0);
    trunc_ln244_7_fu_826_p4 <= comb_3_q0(31 downto 16);
    trunc_ln244_8_fu_836_p1 <= comb_4_q0(16 - 1 downto 0);
    trunc_ln244_9_fu_840_p4 <= comb_4_q0(31 downto 16);
    trunc_ln244_fu_780_p1 <= comb_0_q0(16 - 1 downto 0);
    trunc_ln244_s_fu_854_p4 <= comb_5_q0(31 downto 16);
    trunc_ln31_fu_690_p1 <= phi_ln31_reg_607(4 - 1 downto 0);
    zext_ln31_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_1161_pp0_iter1_reg),64));
    zext_ln544_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_1_reg_618),64));
end behav;
